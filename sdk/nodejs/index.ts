// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { GrantPrivilegeArgs, GrantPrivilegeState } from "./grantPrivilege";
export type GrantPrivilege = import("./grantPrivilege").GrantPrivilege;
export const GrantPrivilege: typeof import("./grantPrivilege").GrantPrivilege = null as any;
utilities.lazyLoad(exports, ["GrantPrivilege"], () => require("./grantPrivilege"));

export { GrantRoleArgs, GrantRoleState } from "./grantRole";
export type GrantRole = import("./grantRole").GrantRole;
export const GrantRole: typeof import("./grantRole").GrantRole = null as any;
utilities.lazyLoad(exports, ["GrantRole"], () => require("./grantRole"));

export * from "./provider";
import { Provider } from "./provider";

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { SettingArgs, SettingState } from "./setting";
export type Setting = import("./setting").Setting;
export const Setting: typeof import("./setting").Setting = null as any;
utilities.lazyLoad(exports, ["Setting"], () => require("./setting"));

export { SettingsProfileArgs, SettingsProfileState } from "./settingsProfile";
export type SettingsProfile = import("./settingsProfile").SettingsProfile;
export const SettingsProfile: typeof import("./settingsProfile").SettingsProfile = null as any;
utilities.lazyLoad(exports, ["SettingsProfile"], () => require("./settingsProfile"));

export { SettingsProfileAssociationArgs, SettingsProfileAssociationState } from "./settingsProfileAssociation";
export type SettingsProfileAssociation = import("./settingsProfileAssociation").SettingsProfileAssociation;
export const SettingsProfileAssociation: typeof import("./settingsProfileAssociation").SettingsProfileAssociation = null as any;
utilities.lazyLoad(exports, ["SettingsProfileAssociation"], () => require("./settingsProfileAssociation"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "clickhousedbops:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "clickhousedbops:index/grantPrivilege:GrantPrivilege":
                return new GrantPrivilege(name, <any>undefined, { urn })
            case "clickhousedbops:index/grantRole:GrantRole":
                return new GrantRole(name, <any>undefined, { urn })
            case "clickhousedbops:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "clickhousedbops:index/setting:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "clickhousedbops:index/settingsProfile:SettingsProfile":
                return new SettingsProfile(name, <any>undefined, { urn })
            case "clickhousedbops:index/settingsProfileAssociation:SettingsProfileAssociation":
                return new SettingsProfileAssociation(name, <any>undefined, { urn })
            case "clickhousedbops:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("clickhousedbops", "index/database", _module)
pulumi.runtime.registerResourceModule("clickhousedbops", "index/grantPrivilege", _module)
pulumi.runtime.registerResourceModule("clickhousedbops", "index/grantRole", _module)
pulumi.runtime.registerResourceModule("clickhousedbops", "index/role", _module)
pulumi.runtime.registerResourceModule("clickhousedbops", "index/setting", _module)
pulumi.runtime.registerResourceModule("clickhousedbops", "index/settingsProfile", _module)
pulumi.runtime.registerResourceModule("clickhousedbops", "index/settingsProfileAssociation", _module)
pulumi.runtime.registerResourceModule("clickhousedbops", "index/user", _module)
pulumi.runtime.registerResourcePackage("clickhousedbops", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:clickhousedbops") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
