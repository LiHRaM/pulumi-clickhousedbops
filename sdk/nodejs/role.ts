// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * You can use the `clickhousedbops.Role` resource to create a `role` in a `ClickHouse` instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as clickhousedbops from "@pulumi/clickhousedbops";
 *
 * const writer = new clickhousedbops.Role("writer", {
 *     clusterName: "cluster",
 *     name: "writer",
 * });
 * ```
 *
 * ## Import
 *
 * Roles can be imported by specifying the ID.
 *
 * Find the ID of the role by checking system.roles table.
 *
 * ```sh
 * $ pulumi import clickhousedbops:index/role:Role example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 *
 * It's also possible to import roles by name:
 *
 * ```sh
 * $ pulumi import clickhousedbops:index/role:Role example rolename
 * ```
 *
 * IMPORTANT: if you have a multi node cluster, you need to specify the cluster name!
 *
 * ```sh
 * $ pulumi import clickhousedbops:index/role:Role example cluster:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 *
 * ```sh
 * $ pulumi import clickhousedbops:index/role:Role example cluster:rolename
 * ```
 */
export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'clickhousedbops:index/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    public readonly clusterName!: pulumi.Output<string | undefined>;
    /**
     * Name of the role
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Role.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Name of the role
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Name of the role
     */
    name?: pulumi.Input<string>;
}
