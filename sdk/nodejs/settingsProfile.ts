// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * You can use the `clickhousedbops.SettingsProfile` resource to create a `Setting Profile` in a `ClickHouse` instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as clickhousedbops from "@pulumi/clickhousedbops";
 *
 * const profile1 = new clickhousedbops.SettingsProfile("profile1", {
 *     clusterName: "cluster",
 *     name: "profile1",
 * });
 * ```
 *
 * ## Import
 *
 * Settings profiles can be imported by specifying the UUID.
 *
 * Find the ID of the settings profile by checking system.settings_profiles table.
 *
 * ```sh
 * $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 *
 * It's also possible to import settings profiles by name:
 *
 * ```sh
 * $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example name
 * ```
 *
 * IMPORTANT: if you have a multi node cluster, you need to specify the cluster name!
 *
 * ```sh
 * $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example cluster:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
 * ```
 *
 * ```sh
 * $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example cluster:name
 * ```
 */
export class SettingsProfile extends pulumi.CustomResource {
    /**
     * Get an existing SettingsProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingsProfileState, opts?: pulumi.CustomResourceOptions): SettingsProfile {
        return new SettingsProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'clickhousedbops:index/settingsProfile:SettingsProfile';

    /**
     * Returns true if the given object is an instance of SettingsProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SettingsProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SettingsProfile.__pulumiType;
    }

    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    public readonly clusterName!: pulumi.Output<string | undefined>;
    /**
     * List of setting profile names to inherit from
     */
    public readonly inheritFroms!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the settings profile
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a SettingsProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SettingsProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingsProfileArgs | SettingsProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingsProfileState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["inheritFroms"] = state ? state.inheritFroms : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as SettingsProfileArgs | undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["inheritFroms"] = args ? args.inheritFroms : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SettingsProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SettingsProfile resources.
 */
export interface SettingsProfileState {
    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * List of setting profile names to inherit from
     */
    inheritFroms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the settings profile
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SettingsProfile resource.
 */
export interface SettingsProfileArgs {
    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * List of setting profile names to inherit from
     */
    inheritFroms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the settings profile
     */
    name?: pulumi.Input<string>;
}
