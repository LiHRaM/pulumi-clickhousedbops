// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The provider type for the clickhousedbops package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'clickhousedbops';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * The hostname to use to connect to the clickhouse instance
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The protocol to use to connect to clickhouse instance. Valid options are: native, nativesecure, http, https
     */
    public readonly protocol!: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.authConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authConfig'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["authConfig"] = pulumi.output(args ? args.authConfig : undefined).apply(JSON.stringify);
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["port"] = pulumi.output(args ? args.port : undefined).apply(JSON.stringify);
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["tlsConfig"] = pulumi.output(args ? args.tlsConfig : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }

    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig(): pulumi.Output<Provider.TerraformConfigResult> {
        return pulumi.runtime.call("pulumi:providers:clickhousedbops/terraformConfig", {
            "__self__": this,
        }, this);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Authentication configuration
     */
    authConfig: pulumi.Input<inputs.ProviderAuthConfig>;
    /**
     * The hostname to use to connect to the clickhouse instance
     */
    host: pulumi.Input<string>;
    /**
     * The port to use to connect to the clickhouse instance
     */
    port: pulumi.Input<number>;
    /**
     * The protocol to use to connect to clickhouse instance. Valid options are: native, nativesecure, http, https
     */
    protocol: pulumi.Input<string>;
    /**
     * TLS configuration options
     */
    tlsConfig?: pulumi.Input<inputs.ProviderTlsConfig>;
}

export namespace Provider {
    /**
     * The results of the Provider.terraformConfig method.
     */
    export interface TerraformConfigResult {
        readonly result: {[key: string]: any};
    }

}
