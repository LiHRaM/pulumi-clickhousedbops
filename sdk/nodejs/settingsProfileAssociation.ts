// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * You can use the `clickhousedbops.SettingsProfileAssociation` resource to associate a `settingsProfile` to a `role` or `user` in a `ClickHouse` instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as clickhousedbops from "@pulumi/clickhousedbops";
 *
 * const roleassociation = new clickhousedbops.SettingsProfileAssociation("roleassociation", {
 *     settingsProfileId: profile1.id,
 *     roleId: role1.id,
 * });
 * ```
 */
export class SettingsProfileAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SettingsProfileAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingsProfileAssociationState, opts?: pulumi.CustomResourceOptions): SettingsProfileAssociation {
        return new SettingsProfileAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'clickhousedbops:index/settingsProfileAssociation:SettingsProfileAssociation';

    /**
     * Returns true if the given object is an instance of SettingsProfileAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SettingsProfileAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SettingsProfileAssociation.__pulumiType;
    }

    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    public readonly clusterName!: pulumi.Output<string | undefined>;
    /**
     * ID of the SettingsProfileAssociation to associate the Settings profile to
     */
    public readonly roleId!: pulumi.Output<string | undefined>;
    /**
     * ID of the settings profile to associate
     */
    public readonly settingsProfileId!: pulumi.Output<string>;
    /**
     * ID of the User to associate the Settings profile to
     */
    public readonly userId!: pulumi.Output<string | undefined>;

    /**
     * Create a SettingsProfileAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingsProfileAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingsProfileAssociationArgs | SettingsProfileAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingsProfileAssociationState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["settingsProfileId"] = state ? state.settingsProfileId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as SettingsProfileAssociationArgs | undefined;
            if ((!args || args.settingsProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settingsProfileId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["settingsProfileId"] = args ? args.settingsProfileId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SettingsProfileAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SettingsProfileAssociation resources.
 */
export interface SettingsProfileAssociationState {
    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * ID of the SettingsProfileAssociation to associate the Settings profile to
     */
    roleId?: pulumi.Input<string>;
    /**
     * ID of the settings profile to associate
     */
    settingsProfileId?: pulumi.Input<string>;
    /**
     * ID of the User to associate the Settings profile to
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SettingsProfileAssociation resource.
 */
export interface SettingsProfileAssociationArgs {
    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * ID of the SettingsProfileAssociation to associate the Settings profile to
     */
    roleId?: pulumi.Input<string>;
    /**
     * ID of the settings profile to associate
     */
    settingsProfileId: pulumi.Input<string>;
    /**
     * ID of the User to associate the Settings profile to
     */
    userId?: pulumi.Input<string>;
}
