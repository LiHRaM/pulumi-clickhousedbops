// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as clickhousedbops from "@pulumi/clickhousedbops";
 *
 * const grant = new clickhousedbops.GrantPrivilege("grant", {
 *     privilegeName: "SELECT",
 *     databaseName: "default",
 *     tableName: "tbl1",
 *     columnName: "count",
 *     granteeUserName: "my_user_name",
 *     grantOption: true,
 * });
 * ```
 */
export class GrantPrivilege extends pulumi.CustomResource {
    /**
     * Get an existing GrantPrivilege resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrantPrivilegeState, opts?: pulumi.CustomResourceOptions): GrantPrivilege {
        return new GrantPrivilege(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'clickhousedbops:index/grantPrivilege:GrantPrivilege';

    /**
     * Returns true if the given object is an instance of GrantPrivilege.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GrantPrivilege {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GrantPrivilege.__pulumiType;
    }

    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    public readonly clusterName!: pulumi.Output<string | undefined>;
    /**
     * The name of the column in `tableName` to grant privilege on.
     */
    public readonly columnName!: pulumi.Output<string | undefined>;
    /**
     * The name of the database to grant privilege on. Defaults to all databases if left null
     */
    public readonly databaseName!: pulumi.Output<string | undefined>;
    /**
     * If true, the grantee will be able to grant the same privileges to others.
     */
    public readonly grantOption!: pulumi.Output<boolean>;
    /**
     * Name of the `role` to grant privileges to.
     */
    public readonly granteeRoleName!: pulumi.Output<string | undefined>;
    /**
     * Name of the `user` to grant privileges to.
     */
    public readonly granteeUserName!: pulumi.Output<string | undefined>;
    /**
     * The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
     */
    public readonly privilegeName!: pulumi.Output<string>;
    /**
     * The name of the table to grant privilege on.
     */
    public readonly tableName!: pulumi.Output<string | undefined>;

    /**
     * Create a GrantPrivilege resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GrantPrivilegeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GrantPrivilegeArgs | GrantPrivilegeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GrantPrivilegeState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["columnName"] = state ? state.columnName : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["grantOption"] = state ? state.grantOption : undefined;
            resourceInputs["granteeRoleName"] = state ? state.granteeRoleName : undefined;
            resourceInputs["granteeUserName"] = state ? state.granteeUserName : undefined;
            resourceInputs["privilegeName"] = state ? state.privilegeName : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
        } else {
            const args = argsOrState as GrantPrivilegeArgs | undefined;
            if ((!args || args.privilegeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privilegeName'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["columnName"] = args ? args.columnName : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["grantOption"] = args ? args.grantOption : undefined;
            resourceInputs["granteeRoleName"] = args ? args.granteeRoleName : undefined;
            resourceInputs["granteeUserName"] = args ? args.granteeUserName : undefined;
            resourceInputs["privilegeName"] = args ? args.privilegeName : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GrantPrivilege.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GrantPrivilege resources.
 */
export interface GrantPrivilegeState {
    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The name of the column in `tableName` to grant privilege on.
     */
    columnName?: pulumi.Input<string>;
    /**
     * The name of the database to grant privilege on. Defaults to all databases if left null
     */
    databaseName?: pulumi.Input<string>;
    /**
     * If true, the grantee will be able to grant the same privileges to others.
     */
    grantOption?: pulumi.Input<boolean>;
    /**
     * Name of the `role` to grant privileges to.
     */
    granteeRoleName?: pulumi.Input<string>;
    /**
     * Name of the `user` to grant privileges to.
     */
    granteeUserName?: pulumi.Input<string>;
    /**
     * The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
     */
    privilegeName?: pulumi.Input<string>;
    /**
     * The name of the table to grant privilege on.
     */
    tableName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GrantPrivilege resource.
 */
export interface GrantPrivilegeArgs {
    /**
     * Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
     * This field must be left null when using a ClickHouse Cloud cluster.
     * When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The name of the column in `tableName` to grant privilege on.
     */
    columnName?: pulumi.Input<string>;
    /**
     * The name of the database to grant privilege on. Defaults to all databases if left null
     */
    databaseName?: pulumi.Input<string>;
    /**
     * If true, the grantee will be able to grant the same privileges to others.
     */
    grantOption?: pulumi.Input<boolean>;
    /**
     * Name of the `role` to grant privileges to.
     */
    granteeRoleName?: pulumi.Input<string>;
    /**
     * Name of the `user` to grant privileges to.
     */
    granteeUserName?: pulumi.Input<string>;
    /**
     * The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
     */
    privilegeName: pulumi.Input<string>;
    /**
     * The name of the table to grant privilege on.
     */
    tableName?: pulumi.Input<string>;
}
