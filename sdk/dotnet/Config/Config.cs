// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Clickhousedbops
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("clickhousedbops");

        private static readonly __Value<Pulumi.Clickhousedbops.Config.Types.AuthConfig?> _authConfig = new __Value<Pulumi.Clickhousedbops.Config.Types.AuthConfig?>(() => __config.GetObject<Pulumi.Clickhousedbops.Config.Types.AuthConfig>("authConfig"));
        /// <summary>
        /// Authentication configuration
        /// </summary>
        public static Pulumi.Clickhousedbops.Config.Types.AuthConfig? AuthConfig
        {
            get => _authConfig.Get();
            set => _authConfig.Set(value);
        }

        private static readonly __Value<string?> _host = new __Value<string?>(() => __config.Get("host"));
        /// <summary>
        /// The hostname to use to connect to the clickhouse instance
        /// </summary>
        public static string? Host
        {
            get => _host.Get();
            set => _host.Set(value);
        }

        private static readonly __Value<int?> _port = new __Value<int?>(() => __config.GetInt32("port"));
        /// <summary>
        /// The port to use to connect to the clickhouse instance
        /// </summary>
        public static int? Port
        {
            get => _port.Get();
            set => _port.Set(value);
        }

        private static readonly __Value<string?> _protocol = new __Value<string?>(() => __config.Get("protocol"));
        /// <summary>
        /// The protocol to use to connect to clickhouse instance. Valid options are: native, nativesecure, http, https
        /// </summary>
        public static string? Protocol
        {
            get => _protocol.Get();
            set => _protocol.Set(value);
        }

        private static readonly __Value<Pulumi.Clickhousedbops.Config.Types.TlsConfig?> _tlsConfig = new __Value<Pulumi.Clickhousedbops.Config.Types.TlsConfig?>(() => __config.GetObject<Pulumi.Clickhousedbops.Config.Types.TlsConfig>("tlsConfig"));
        /// <summary>
        /// TLS configuration options
        /// </summary>
        public static Pulumi.Clickhousedbops.Config.Types.TlsConfig? TlsConfig
        {
            get => _tlsConfig.Get();
            set => _tlsConfig.Set(value);
        }

        public static class Types
        {

             public class AuthConfig
             {
            /// <summary>
            /// The password to use to authenticate to ClickHouse
            /// </summary>
                public string? Password { get; set; } = null!;
            /// <summary>
            /// The authentication method to use
            /// </summary>
                public string Strategy { get; set; }
            /// <summary>
            /// The username to use to authenticate to ClickHouse
            /// </summary>
                public string Username { get; set; }
            }

             public class TlsConfig
             {
            /// <summary>
            /// Skip TLS cert verification when using the https protocol. This is insecure!
            /// </summary>
                public bool? InsecureSkipVerify { get; set; }
            }
        }
    }
}
