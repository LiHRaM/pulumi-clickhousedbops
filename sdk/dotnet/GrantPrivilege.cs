// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Clickhousedbops
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Clickhousedbops = Pulumi.Clickhousedbops;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var grant = new Clickhousedbops.GrantPrivilege("grant", new()
    ///     {
    ///         PrivilegeName = "SELECT",
    ///         DatabaseName = "default",
    ///         TableName = "tbl1",
    ///         ColumnName = "count",
    ///         GranteeUserName = "my_user_name",
    ///         GrantOption = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ClickhousedbopsResourceType("clickhousedbops:index/grantPrivilege:GrantPrivilege")]
    public partial class GrantPrivilege : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        /// This field must be left null when using a ClickHouse Cloud cluster.
        /// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        /// </summary>
        [Output("clusterName")]
        public Output<string?> ClusterName { get; private set; } = null!;

        /// <summary>
        /// The name of the column in `table_name` to grant privilege on.
        /// </summary>
        [Output("columnName")]
        public Output<string?> ColumnName { get; private set; } = null!;

        /// <summary>
        /// The name of the database to grant privilege on. Defaults to all databases if left null
        /// </summary>
        [Output("databaseName")]
        public Output<string?> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// If true, the grantee will be able to grant the same privileges to others.
        /// </summary>
        [Output("grantOption")]
        public Output<bool> GrantOption { get; private set; } = null!;

        /// <summary>
        /// Name of the `role` to grant privileges to.
        /// </summary>
        [Output("granteeRoleName")]
        public Output<string?> GranteeRoleName { get; private set; } = null!;

        /// <summary>
        /// Name of the `user` to grant privileges to.
        /// </summary>
        [Output("granteeUserName")]
        public Output<string?> GranteeUserName { get; private set; } = null!;

        /// <summary>
        /// The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
        /// </summary>
        [Output("privilegeName")]
        public Output<string> PrivilegeName { get; private set; } = null!;

        /// <summary>
        /// The name of the table to grant privilege on.
        /// </summary>
        [Output("tableName")]
        public Output<string?> TableName { get; private set; } = null!;


        /// <summary>
        /// Create a GrantPrivilege resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GrantPrivilege(string name, GrantPrivilegeArgs args, CustomResourceOptions? options = null)
            : base("clickhousedbops:index/grantPrivilege:GrantPrivilege", name, args ?? new GrantPrivilegeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GrantPrivilege(string name, Input<string> id, GrantPrivilegeState? state = null, CustomResourceOptions? options = null)
            : base("clickhousedbops:index/grantPrivilege:GrantPrivilege", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GrantPrivilege resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GrantPrivilege Get(string name, Input<string> id, GrantPrivilegeState? state = null, CustomResourceOptions? options = null)
        {
            return new GrantPrivilege(name, id, state, options);
        }
    }

    public sealed class GrantPrivilegeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        /// This field must be left null when using a ClickHouse Cloud cluster.
        /// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// The name of the column in `table_name` to grant privilege on.
        /// </summary>
        [Input("columnName")]
        public Input<string>? ColumnName { get; set; }

        /// <summary>
        /// The name of the database to grant privilege on. Defaults to all databases if left null
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// If true, the grantee will be able to grant the same privileges to others.
        /// </summary>
        [Input("grantOption")]
        public Input<bool>? GrantOption { get; set; }

        /// <summary>
        /// Name of the `role` to grant privileges to.
        /// </summary>
        [Input("granteeRoleName")]
        public Input<string>? GranteeRoleName { get; set; }

        /// <summary>
        /// Name of the `user` to grant privileges to.
        /// </summary>
        [Input("granteeUserName")]
        public Input<string>? GranteeUserName { get; set; }

        /// <summary>
        /// The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
        /// </summary>
        [Input("privilegeName", required: true)]
        public Input<string> PrivilegeName { get; set; } = null!;

        /// <summary>
        /// The name of the table to grant privilege on.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        public GrantPrivilegeArgs()
        {
        }
        public static new GrantPrivilegeArgs Empty => new GrantPrivilegeArgs();
    }

    public sealed class GrantPrivilegeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        /// This field must be left null when using a ClickHouse Cloud cluster.
        /// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// The name of the column in `table_name` to grant privilege on.
        /// </summary>
        [Input("columnName")]
        public Input<string>? ColumnName { get; set; }

        /// <summary>
        /// The name of the database to grant privilege on. Defaults to all databases if left null
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// If true, the grantee will be able to grant the same privileges to others.
        /// </summary>
        [Input("grantOption")]
        public Input<bool>? GrantOption { get; set; }

        /// <summary>
        /// Name of the `role` to grant privileges to.
        /// </summary>
        [Input("granteeRoleName")]
        public Input<string>? GranteeRoleName { get; set; }

        /// <summary>
        /// Name of the `user` to grant privileges to.
        /// </summary>
        [Input("granteeUserName")]
        public Input<string>? GranteeUserName { get; set; }

        /// <summary>
        /// The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
        /// </summary>
        [Input("privilegeName")]
        public Input<string>? PrivilegeName { get; set; }

        /// <summary>
        /// The name of the table to grant privilege on.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        public GrantPrivilegeState()
        {
        }
        public static new GrantPrivilegeState Empty => new GrantPrivilegeState();
    }
}
