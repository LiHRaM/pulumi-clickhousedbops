// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Clickhousedbops
{
    /// <summary>
    /// You can use the `clickhousedbops.Role` resource to create a `role` in a `ClickHouse` instance.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Clickhousedbops = Pulumi.Clickhousedbops;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var writer = new Clickhousedbops.Role("writer", new()
    ///     {
    ///         ClusterName = "cluster",
    ///         Name = "writer",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Roles can be imported by specifying the ID.
    /// 
    /// Find the ID of the role by checking system.roles table.
    /// 
    /// ```sh
    /// $ pulumi import clickhousedbops:index/role:Role example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    /// ```
    /// 
    /// It's also possible to import roles by name:
    /// 
    /// ```sh
    /// $ pulumi import clickhousedbops:index/role:Role example rolename
    /// ```
    /// 
    /// IMPORTANT: if you have a multi node cluster, you need to specify the cluster name!
    /// 
    /// ```sh
    /// $ pulumi import clickhousedbops:index/role:Role example cluster:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import clickhousedbops:index/role:Role example cluster:rolename
    /// ```
    /// </summary>
    [ClickhousedbopsResourceType("clickhousedbops:index/role:Role")]
    public partial class Role : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        /// This field must be left null when using a ClickHouse Cloud cluster.
        /// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        /// </summary>
        [Output("clusterName")]
        public Output<string?> ClusterName { get; private set; } = null!;

        /// <summary>
        /// Name of the role
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Role resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Role(string name, RoleArgs? args = null, CustomResourceOptions? options = null)
            : base("clickhousedbops:index/role:Role", name, args ?? new RoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Role(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
            : base("clickhousedbops:index/role:Role", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Role resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Role Get(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
        {
            return new Role(name, id, state, options);
        }
    }

    public sealed class RoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        /// This field must be left null when using a ClickHouse Cloud cluster.
        /// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// Name of the role
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public RoleArgs()
        {
        }
        public static new RoleArgs Empty => new RoleArgs();
    }

    public sealed class RoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        /// This field must be left null when using a ClickHouse Cloud cluster.
        /// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// Name of the role
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public RoleState()
        {
        }
        public static new RoleState Empty => new RoleState();
    }
}
