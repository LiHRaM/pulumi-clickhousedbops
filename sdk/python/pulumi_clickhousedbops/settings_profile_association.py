# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SettingsProfileAssociationArgs', 'SettingsProfileAssociation']

@pulumi.input_type
class SettingsProfileAssociationArgs:
    def __init__(__self__, *,
                 settings_profile_id: pulumi.Input[_builtins.str],
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SettingsProfileAssociation resource.
        :param pulumi.Input[_builtins.str] settings_profile_id: ID of the settings profile to associate
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] role_id: ID of the SettingsProfileAssociation to associate the Settings profile to
        :param pulumi.Input[_builtins.str] user_id: ID of the User to associate the Settings profile to
        """
        pulumi.set(__self__, "settings_profile_id", settings_profile_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter(name="settingsProfileId")
    def settings_profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the settings profile to associate
        """
        return pulumi.get(self, "settings_profile_id")

    @settings_profile_id.setter
    def settings_profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "settings_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the SettingsProfileAssociation to associate the Settings profile to
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the User to associate the Settings profile to
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class _SettingsProfileAssociationState:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 settings_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SettingsProfileAssociation resources.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] role_id: ID of the SettingsProfileAssociation to associate the Settings profile to
        :param pulumi.Input[_builtins.str] settings_profile_id: ID of the settings profile to associate
        :param pulumi.Input[_builtins.str] user_id: ID of the User to associate the Settings profile to
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if settings_profile_id is not None:
            pulumi.set(__self__, "settings_profile_id", settings_profile_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the SettingsProfileAssociation to associate the Settings profile to
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="settingsProfileId")
    def settings_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the settings profile to associate
        """
        return pulumi.get(self, "settings_profile_id")

    @settings_profile_id.setter
    def settings_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "settings_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the User to associate the Settings profile to
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)


@pulumi.type_token("clickhousedbops:index/settingsProfileAssociation:SettingsProfileAssociation")
class SettingsProfileAssociation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 settings_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        You can use the `SettingsProfileAssociation` resource to associate a `settings_profile` to a `role` or `user` in a `ClickHouse` instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_clickhousedbops as clickhousedbops

        roleassociation = clickhousedbops.SettingsProfileAssociation("roleassociation",
            settings_profile_id=profile1["id"],
            role_id=role1["id"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] role_id: ID of the SettingsProfileAssociation to associate the Settings profile to
        :param pulumi.Input[_builtins.str] settings_profile_id: ID of the settings profile to associate
        :param pulumi.Input[_builtins.str] user_id: ID of the User to associate the Settings profile to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SettingsProfileAssociationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        You can use the `SettingsProfileAssociation` resource to associate a `settings_profile` to a `role` or `user` in a `ClickHouse` instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_clickhousedbops as clickhousedbops

        roleassociation = clickhousedbops.SettingsProfileAssociation("roleassociation",
            settings_profile_id=profile1["id"],
            role_id=role1["id"])
        ```

        :param str resource_name: The name of the resource.
        :param SettingsProfileAssociationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingsProfileAssociationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 settings_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingsProfileAssociationArgs.__new__(SettingsProfileAssociationArgs)

            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["role_id"] = role_id
            if settings_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'settings_profile_id'")
            __props__.__dict__["settings_profile_id"] = settings_profile_id
            __props__.__dict__["user_id"] = user_id
        super(SettingsProfileAssociation, __self__).__init__(
            'clickhousedbops:index/settingsProfileAssociation:SettingsProfileAssociation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            role_id: Optional[pulumi.Input[_builtins.str]] = None,
            settings_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            user_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SettingsProfileAssociation':
        """
        Get an existing SettingsProfileAssociation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] role_id: ID of the SettingsProfileAssociation to associate the Settings profile to
        :param pulumi.Input[_builtins.str] settings_profile_id: ID of the settings profile to associate
        :param pulumi.Input[_builtins.str] user_id: ID of the User to associate the Settings profile to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingsProfileAssociationState.__new__(_SettingsProfileAssociationState)

        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["settings_profile_id"] = settings_profile_id
        __props__.__dict__["user_id"] = user_id
        return SettingsProfileAssociation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the SettingsProfileAssociation to associate the Settings profile to
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="settingsProfileId")
    def settings_profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the settings profile to associate
        """
        return pulumi.get(self, "settings_profile_id")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the User to associate the Settings profile to
        """
        return pulumi.get(self, "user_id")

