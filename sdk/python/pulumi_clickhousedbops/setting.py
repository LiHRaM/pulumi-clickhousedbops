# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SettingArgs', 'Setting']

@pulumi.input_type
class SettingArgs:
    def __init__(__self__, *,
                 settings_profile_id: pulumi.Input[_builtins.str],
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 max: Optional[pulumi.Input[_builtins.str]] = None,
                 min: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 writability: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Setting resource.
        :param pulumi.Input[_builtins.str] settings_profile_id: ID of the settings profile
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] max: Max Value for the setting
        :param pulumi.Input[_builtins.str] min: Min Value for the setting
        :param pulumi.Input[_builtins.str] name: Name of the setting
        :param pulumi.Input[_builtins.str] value: Value for the setting
        :param pulumi.Input[_builtins.str] writability: Writability attribute for the setting
        """
        pulumi.set(__self__, "settings_profile_id", settings_profile_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if writability is not None:
            pulumi.set(__self__, "writability", writability)

    @_builtins.property
    @pulumi.getter(name="settingsProfileId")
    def settings_profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the settings profile
        """
        return pulumi.get(self, "settings_profile_id")

    @settings_profile_id.setter
    def settings_profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "settings_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Max Value for the setting
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max", value)

    @_builtins.property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Min Value for the setting
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "min", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the setting
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value for the setting
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def writability(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Writability attribute for the setting
        """
        return pulumi.get(self, "writability")

    @writability.setter
    def writability(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "writability", value)


@pulumi.input_type
class _SettingState:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 max: Optional[pulumi.Input[_builtins.str]] = None,
                 min: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 settings_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 writability: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Setting resources.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] max: Max Value for the setting
        :param pulumi.Input[_builtins.str] min: Min Value for the setting
        :param pulumi.Input[_builtins.str] name: Name of the setting
        :param pulumi.Input[_builtins.str] settings_profile_id: ID of the settings profile
        :param pulumi.Input[_builtins.str] value: Value for the setting
        :param pulumi.Input[_builtins.str] writability: Writability attribute for the setting
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if settings_profile_id is not None:
            pulumi.set(__self__, "settings_profile_id", settings_profile_id)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if writability is not None:
            pulumi.set(__self__, "writability", writability)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Max Value for the setting
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max", value)

    @_builtins.property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Min Value for the setting
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "min", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the setting
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="settingsProfileId")
    def settings_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the settings profile
        """
        return pulumi.get(self, "settings_profile_id")

    @settings_profile_id.setter
    def settings_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "settings_profile_id", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value for the setting
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def writability(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Writability attribute for the setting
        """
        return pulumi.get(self, "writability")

    @writability.setter
    def writability(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "writability", value)


@pulumi.type_token("clickhousedbops:index/setting:Setting")
class Setting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 max: Optional[pulumi.Input[_builtins.str]] = None,
                 min: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 settings_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 writability: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        You can use the `Setting` resource to manage the single `settings` of a `Setting Profile` in a `ClickHouse` instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_clickhousedbops as clickhousedbops

        setting1 = clickhousedbops.Setting("setting1",
            settings_profile_id=profile1["id"],
            name="max_memory_usage",
            value="1000",
            min="100",
            max="2000",
            writability="CHANGEABLE_IN_READONLY")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] max: Max Value for the setting
        :param pulumi.Input[_builtins.str] min: Min Value for the setting
        :param pulumi.Input[_builtins.str] name: Name of the setting
        :param pulumi.Input[_builtins.str] settings_profile_id: ID of the settings profile
        :param pulumi.Input[_builtins.str] value: Value for the setting
        :param pulumi.Input[_builtins.str] writability: Writability attribute for the setting
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        You can use the `Setting` resource to manage the single `settings` of a `Setting Profile` in a `ClickHouse` instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_clickhousedbops as clickhousedbops

        setting1 = clickhousedbops.Setting("setting1",
            settings_profile_id=profile1["id"],
            name="max_memory_usage",
            value="1000",
            min="100",
            max="2000",
            writability="CHANGEABLE_IN_READONLY")
        ```

        :param str resource_name: The name of the resource.
        :param SettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 max: Optional[pulumi.Input[_builtins.str]] = None,
                 min: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 settings_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 writability: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingArgs.__new__(SettingArgs)

            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["max"] = max
            __props__.__dict__["min"] = min
            __props__.__dict__["name"] = name
            if settings_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'settings_profile_id'")
            __props__.__dict__["settings_profile_id"] = settings_profile_id
            __props__.__dict__["value"] = value
            __props__.__dict__["writability"] = writability
        super(Setting, __self__).__init__(
            'clickhousedbops:index/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            max: Optional[pulumi.Input[_builtins.str]] = None,
            min: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            settings_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None,
            writability: Optional[pulumi.Input[_builtins.str]] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] max: Max Value for the setting
        :param pulumi.Input[_builtins.str] min: Min Value for the setting
        :param pulumi.Input[_builtins.str] name: Name of the setting
        :param pulumi.Input[_builtins.str] settings_profile_id: ID of the settings profile
        :param pulumi.Input[_builtins.str] value: Value for the setting
        :param pulumi.Input[_builtins.str] writability: Writability attribute for the setting
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingState.__new__(_SettingState)

        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["max"] = max
        __props__.__dict__["min"] = min
        __props__.__dict__["name"] = name
        __props__.__dict__["settings_profile_id"] = settings_profile_id
        __props__.__dict__["value"] = value
        __props__.__dict__["writability"] = writability
        return Setting(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter
    def max(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Max Value for the setting
        """
        return pulumi.get(self, "max")

    @_builtins.property
    @pulumi.getter
    def min(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Min Value for the setting
        """
        return pulumi.get(self, "min")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the setting
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="settingsProfileId")
    def settings_profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the settings profile
        """
        return pulumi.get(self, "settings_profile_id")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Value for the setting
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def writability(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Writability attribute for the setting
        """
        return pulumi.get(self, "writability")

