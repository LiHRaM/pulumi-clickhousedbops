# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ProviderAuthConfigArgs',
    'ProviderAuthConfigArgsDict',
    'ProviderTlsConfigArgs',
    'ProviderTlsConfigArgsDict',
]

MYPY = False

if not MYPY:
    class ProviderAuthConfigArgsDict(TypedDict):
        strategy: pulumi.Input[_builtins.str]
        """
        The authentication method to use
        """
        username: pulumi.Input[_builtins.str]
        """
        The username to use to authenticate to ClickHouse
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        The password to use to authenticate to ClickHouse
        """
elif False:
    ProviderAuthConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderAuthConfigArgs:
    def __init__(__self__, *,
                 strategy: pulumi.Input[_builtins.str],
                 username: pulumi.Input[_builtins.str],
                 password: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] strategy: The authentication method to use
        :param pulumi.Input[_builtins.str] username: The username to use to authenticate to ClickHouse
        :param pulumi.Input[_builtins.str] password: The password to use to authenticate to ClickHouse
        """
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> pulumi.Input[_builtins.str]:
        """
        The authentication method to use
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "strategy", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str]:
        """
        The username to use to authenticate to ClickHouse
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "username", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password to use to authenticate to ClickHouse
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)


if not MYPY:
    class ProviderTlsConfigArgsDict(TypedDict):
        insecure_skip_verify: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Skip TLS cert verification when using the https protocol. This is insecure!
        """
elif False:
    ProviderTlsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderTlsConfigArgs:
    def __init__(__self__, *,
                 insecure_skip_verify: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] insecure_skip_verify: Skip TLS cert verification when using the https protocol. This is insecure!
        """
        if insecure_skip_verify is not None:
            pulumi.set(__self__, "insecure_skip_verify", insecure_skip_verify)

    @_builtins.property
    @pulumi.getter(name="insecureSkipVerify")
    def insecure_skip_verify(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Skip TLS cert verification when using the https protocol. This is insecure!
        """
        return pulumi.get(self, "insecure_skip_verify")

    @insecure_skip_verify.setter
    def insecure_skip_verify(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "insecure_skip_verify", value)


