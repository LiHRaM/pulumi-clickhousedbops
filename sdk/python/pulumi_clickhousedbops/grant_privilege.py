# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['GrantPrivilegeArgs', 'GrantPrivilege']

@pulumi.input_type
class GrantPrivilegeArgs:
    def __init__(__self__, *,
                 privilege_name: pulumi.Input[_builtins.str],
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 column_name: Optional[pulumi.Input[_builtins.str]] = None,
                 database_name: Optional[pulumi.Input[_builtins.str]] = None,
                 grant_option: Optional[pulumi.Input[_builtins.bool]] = None,
                 grantee_role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 grantee_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a GrantPrivilege resource.
        :param pulumi.Input[_builtins.str] privilege_name: The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] column_name: The name of the column in `table_name` to grant privilege on.
        :param pulumi.Input[_builtins.str] database_name: The name of the database to grant privilege on. Defaults to all databases if left null
        :param pulumi.Input[_builtins.bool] grant_option: If true, the grantee will be able to grant the same privileges to others.
        :param pulumi.Input[_builtins.str] grantee_role_name: Name of the `role` to grant privileges to.
        :param pulumi.Input[_builtins.str] grantee_user_name: Name of the `user` to grant privileges to.
        :param pulumi.Input[_builtins.str] table_name: The name of the table to grant privilege on.
        """
        pulumi.set(__self__, "privilege_name", privilege_name)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if grant_option is not None:
            pulumi.set(__self__, "grant_option", grant_option)
        if grantee_role_name is not None:
            pulumi.set(__self__, "grantee_role_name", grantee_role_name)
        if grantee_user_name is not None:
            pulumi.set(__self__, "grantee_user_name", grantee_user_name)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @_builtins.property
    @pulumi.getter(name="privilegeName")
    def privilege_name(self) -> pulumi.Input[_builtins.str]:
        """
        The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
        """
        return pulumi.get(self, "privilege_name")

    @privilege_name.setter
    def privilege_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "privilege_name", value)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the column in `table_name` to grant privilege on.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "column_name", value)

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the database to grant privilege on. Defaults to all databases if left null
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_name", value)

    @_builtins.property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, the grantee will be able to grant the same privileges to others.
        """
        return pulumi.get(self, "grant_option")

    @grant_option.setter
    def grant_option(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "grant_option", value)

    @_builtins.property
    @pulumi.getter(name="granteeRoleName")
    def grantee_role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the `role` to grant privileges to.
        """
        return pulumi.get(self, "grantee_role_name")

    @grantee_role_name.setter
    def grantee_role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "grantee_role_name", value)

    @_builtins.property
    @pulumi.getter(name="granteeUserName")
    def grantee_user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the `user` to grant privileges to.
        """
        return pulumi.get(self, "grantee_user_name")

    @grantee_user_name.setter
    def grantee_user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "grantee_user_name", value)

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the table to grant privilege on.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class _GrantPrivilegeState:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 column_name: Optional[pulumi.Input[_builtins.str]] = None,
                 database_name: Optional[pulumi.Input[_builtins.str]] = None,
                 grant_option: Optional[pulumi.Input[_builtins.bool]] = None,
                 grantee_role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 grantee_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering GrantPrivilege resources.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] column_name: The name of the column in `table_name` to grant privilege on.
        :param pulumi.Input[_builtins.str] database_name: The name of the database to grant privilege on. Defaults to all databases if left null
        :param pulumi.Input[_builtins.bool] grant_option: If true, the grantee will be able to grant the same privileges to others.
        :param pulumi.Input[_builtins.str] grantee_role_name: Name of the `role` to grant privileges to.
        :param pulumi.Input[_builtins.str] grantee_user_name: Name of the `user` to grant privileges to.
        :param pulumi.Input[_builtins.str] privilege_name: The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
        :param pulumi.Input[_builtins.str] table_name: The name of the table to grant privilege on.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if grant_option is not None:
            pulumi.set(__self__, "grant_option", grant_option)
        if grantee_role_name is not None:
            pulumi.set(__self__, "grantee_role_name", grantee_role_name)
        if grantee_user_name is not None:
            pulumi.set(__self__, "grantee_user_name", grantee_user_name)
        if privilege_name is not None:
            pulumi.set(__self__, "privilege_name", privilege_name)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the column in `table_name` to grant privilege on.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "column_name", value)

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the database to grant privilege on. Defaults to all databases if left null
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_name", value)

    @_builtins.property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, the grantee will be able to grant the same privileges to others.
        """
        return pulumi.get(self, "grant_option")

    @grant_option.setter
    def grant_option(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "grant_option", value)

    @_builtins.property
    @pulumi.getter(name="granteeRoleName")
    def grantee_role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the `role` to grant privileges to.
        """
        return pulumi.get(self, "grantee_role_name")

    @grantee_role_name.setter
    def grantee_role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "grantee_role_name", value)

    @_builtins.property
    @pulumi.getter(name="granteeUserName")
    def grantee_user_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the `user` to grant privileges to.
        """
        return pulumi.get(self, "grantee_user_name")

    @grantee_user_name.setter
    def grantee_user_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "grantee_user_name", value)

    @_builtins.property
    @pulumi.getter(name="privilegeName")
    def privilege_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
        """
        return pulumi.get(self, "privilege_name")

    @privilege_name.setter
    def privilege_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privilege_name", value)

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the table to grant privilege on.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_name", value)


@pulumi.type_token("clickhousedbops:index/grantPrivilege:GrantPrivilege")
class GrantPrivilege(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 column_name: Optional[pulumi.Input[_builtins.str]] = None,
                 database_name: Optional[pulumi.Input[_builtins.str]] = None,
                 grant_option: Optional[pulumi.Input[_builtins.bool]] = None,
                 grantee_role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 grantee_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_clickhousedbops as clickhousedbops

        grant = clickhousedbops.GrantPrivilege("grant",
            privilege_name="SELECT",
            database_name="default",
            table_name="tbl1",
            column_name="count",
            grantee_user_name="my_user_name",
            grant_option=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] column_name: The name of the column in `table_name` to grant privilege on.
        :param pulumi.Input[_builtins.str] database_name: The name of the database to grant privilege on. Defaults to all databases if left null
        :param pulumi.Input[_builtins.bool] grant_option: If true, the grantee will be able to grant the same privileges to others.
        :param pulumi.Input[_builtins.str] grantee_role_name: Name of the `role` to grant privileges to.
        :param pulumi.Input[_builtins.str] grantee_user_name: Name of the `user` to grant privileges to.
        :param pulumi.Input[_builtins.str] privilege_name: The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
        :param pulumi.Input[_builtins.str] table_name: The name of the table to grant privilege on.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GrantPrivilegeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_clickhousedbops as clickhousedbops

        grant = clickhousedbops.GrantPrivilege("grant",
            privilege_name="SELECT",
            database_name="default",
            table_name="tbl1",
            column_name="count",
            grantee_user_name="my_user_name",
            grant_option=True)
        ```

        :param str resource_name: The name of the resource.
        :param GrantPrivilegeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GrantPrivilegeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 column_name: Optional[pulumi.Input[_builtins.str]] = None,
                 database_name: Optional[pulumi.Input[_builtins.str]] = None,
                 grant_option: Optional[pulumi.Input[_builtins.bool]] = None,
                 grantee_role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 grantee_user_name: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege_name: Optional[pulumi.Input[_builtins.str]] = None,
                 table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GrantPrivilegeArgs.__new__(GrantPrivilegeArgs)

            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["column_name"] = column_name
            __props__.__dict__["database_name"] = database_name
            __props__.__dict__["grant_option"] = grant_option
            __props__.__dict__["grantee_role_name"] = grantee_role_name
            __props__.__dict__["grantee_user_name"] = grantee_user_name
            if privilege_name is None and not opts.urn:
                raise TypeError("Missing required property 'privilege_name'")
            __props__.__dict__["privilege_name"] = privilege_name
            __props__.__dict__["table_name"] = table_name
        super(GrantPrivilege, __self__).__init__(
            'clickhousedbops:index/grantPrivilege:GrantPrivilege',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            column_name: Optional[pulumi.Input[_builtins.str]] = None,
            database_name: Optional[pulumi.Input[_builtins.str]] = None,
            grant_option: Optional[pulumi.Input[_builtins.bool]] = None,
            grantee_role_name: Optional[pulumi.Input[_builtins.str]] = None,
            grantee_user_name: Optional[pulumi.Input[_builtins.str]] = None,
            privilege_name: Optional[pulumi.Input[_builtins.str]] = None,
            table_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'GrantPrivilege':
        """
        Get an existing GrantPrivilege resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[_builtins.str] column_name: The name of the column in `table_name` to grant privilege on.
        :param pulumi.Input[_builtins.str] database_name: The name of the database to grant privilege on. Defaults to all databases if left null
        :param pulumi.Input[_builtins.bool] grant_option: If true, the grantee will be able to grant the same privileges to others.
        :param pulumi.Input[_builtins.str] grantee_role_name: Name of the `role` to grant privileges to.
        :param pulumi.Input[_builtins.str] grantee_user_name: Name of the `user` to grant privileges to.
        :param pulumi.Input[_builtins.str] privilege_name: The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
        :param pulumi.Input[_builtins.str] table_name: The name of the table to grant privilege on.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GrantPrivilegeState.__new__(_GrantPrivilegeState)

        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["column_name"] = column_name
        __props__.__dict__["database_name"] = database_name
        __props__.__dict__["grant_option"] = grant_option
        __props__.__dict__["grantee_role_name"] = grantee_role_name
        __props__.__dict__["grantee_user_name"] = grantee_user_name
        __props__.__dict__["privilege_name"] = privilege_name
        __props__.__dict__["table_name"] = table_name
        return GrantPrivilege(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the column in `table_name` to grant privilege on.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the database to grant privilege on. Defaults to all databases if left null
        """
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> pulumi.Output[_builtins.bool]:
        """
        If true, the grantee will be able to grant the same privileges to others.
        """
        return pulumi.get(self, "grant_option")

    @_builtins.property
    @pulumi.getter(name="granteeRoleName")
    def grantee_role_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of the `role` to grant privileges to.
        """
        return pulumi.get(self, "grantee_role_name")

    @_builtins.property
    @pulumi.getter(name="granteeUserName")
    def grantee_user_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of the `user` to grant privileges to.
        """
        return pulumi.get(self, "grantee_user_name")

    @_builtins.property
    @pulumi.getter(name="privilegeName")
    def privilege_name(self) -> pulumi.Output[_builtins.str]:
        """
        The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
        """
        return pulumi.get(self, "privilege_name")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the table to grant privilege on.
        """
        return pulumi.get(self, "table_name")

