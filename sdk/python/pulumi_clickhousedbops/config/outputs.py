# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AuthConfig',
    'TlsConfig',
]

@pulumi.output_type
class AuthConfig(dict):
    def __init__(__self__, *,
                 strategy: _builtins.str,
                 username: _builtins.str,
                 password: Optional[_builtins.str] = None):
        """
        :param _builtins.str strategy: The authentication method to use
        :param _builtins.str username: The username to use to authenticate to ClickHouse
        :param _builtins.str password: The password to use to authenticate to ClickHouse
        """
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> _builtins.str:
        """
        The authentication method to use
        """
        return pulumi.get(self, "strategy")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        The username to use to authenticate to ClickHouse
        """
        return pulumi.get(self, "username")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        The password to use to authenticate to ClickHouse
        """
        return pulumi.get(self, "password")


@pulumi.output_type
class TlsConfig(dict):
    def __init__(__self__, *,
                 insecure_skip_verify: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool insecure_skip_verify: Skip TLS cert verification when using the https protocol. This is insecure!
        """
        if insecure_skip_verify is not None:
            pulumi.set(__self__, "insecure_skip_verify", insecure_skip_verify)

    @_builtins.property
    @pulumi.getter(name="insecureSkipVerify")
    def insecure_skip_verify(self) -> Optional[_builtins.bool]:
        """
        Skip TLS cert verification when using the https protocol. This is insecure!
        """
        return pulumi.get(self, "insecure_skip_verify")


