# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 auth_config: pulumi.Input['ProviderAuthConfigArgs'],
                 host: pulumi.Input[_builtins.str],
                 port: pulumi.Input[_builtins.int],
                 protocol: pulumi.Input[_builtins.str],
                 tls_config: Optional[pulumi.Input['ProviderTlsConfigArgs']] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input['ProviderAuthConfigArgs'] auth_config: Authentication configuration
        :param pulumi.Input[_builtins.str] host: The hostname to use to connect to the clickhouse instance
        :param pulumi.Input[_builtins.int] port: The port to use to connect to the clickhouse instance
        :param pulumi.Input[_builtins.str] protocol: The protocol to use to connect to clickhouse instance. Valid options are: native, nativesecure, http, https
        :param pulumi.Input['ProviderTlsConfigArgs'] tls_config: TLS configuration options
        """
        pulumi.set(__self__, "auth_config", auth_config)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if tls_config is not None:
            pulumi.set(__self__, "tls_config", tls_config)

    @_builtins.property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> pulumi.Input['ProviderAuthConfigArgs']:
        """
        Authentication configuration
        """
        return pulumi.get(self, "auth_config")

    @auth_config.setter
    def auth_config(self, value: pulumi.Input['ProviderAuthConfigArgs']):
        pulumi.set(self, "auth_config", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Input[_builtins.str]:
        """
        The hostname to use to connect to the clickhouse instance
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        The port to use to connect to the clickhouse instance
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        The protocol to use to connect to clickhouse instance. Valid options are: native, nativesecure, http, https
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> Optional[pulumi.Input['ProviderTlsConfigArgs']]:
        """
        TLS configuration options
        """
        return pulumi.get(self, "tls_config")

    @tls_config.setter
    def tls_config(self, value: Optional[pulumi.Input['ProviderTlsConfigArgs']]):
        pulumi.set(self, "tls_config", value)


@pulumi.type_token("pulumi:providers:clickhousedbops")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_config: Optional[pulumi.Input[Union['ProviderAuthConfigArgs', 'ProviderAuthConfigArgsDict']]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_config: Optional[pulumi.Input[Union['ProviderTlsConfigArgs', 'ProviderTlsConfigArgsDict']]] = None,
                 __props__=None):
        """
        The provider type for the clickhousedbops package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ProviderAuthConfigArgs', 'ProviderAuthConfigArgsDict']] auth_config: Authentication configuration
        :param pulumi.Input[_builtins.str] host: The hostname to use to connect to the clickhouse instance
        :param pulumi.Input[_builtins.int] port: The port to use to connect to the clickhouse instance
        :param pulumi.Input[_builtins.str] protocol: The protocol to use to connect to clickhouse instance. Valid options are: native, nativesecure, http, https
        :param pulumi.Input[Union['ProviderTlsConfigArgs', 'ProviderTlsConfigArgsDict']] tls_config: TLS configuration options
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the clickhousedbops package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_config: Optional[pulumi.Input[Union['ProviderAuthConfigArgs', 'ProviderAuthConfigArgsDict']]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_config: Optional[pulumi.Input[Union['ProviderTlsConfigArgs', 'ProviderTlsConfigArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if auth_config is None and not opts.urn:
                raise TypeError("Missing required property 'auth_config'")
            __props__.__dict__["auth_config"] = pulumi.Output.from_input(auth_config).apply(pulumi.runtime.to_json) if auth_config is not None else None
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = pulumi.Output.from_input(port).apply(pulumi.runtime.to_json) if port is not None else None
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["tls_config"] = pulumi.Output.from_input(tls_config).apply(pulumi.runtime.to_json) if tls_config is not None else None
        super(Provider, __self__).__init__(
            'clickhousedbops',
            resource_name,
            __props__,
            opts)

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Output[_builtins.str]:
        """
        The hostname to use to connect to the clickhouse instance
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        The protocol to use to connect to clickhouse instance. Valid options are: native, nativesecure, http, https
        """
        return pulumi.get(self, "protocol")

    @pulumi.output_type
    class TerraformConfigResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @_builtins.property
        @pulumi.getter
        def result(self) -> Mapping[str, Any]:
            return pulumi.get(self, "result")

    def terraform_config(__self__) -> pulumi.Output['Provider.TerraformConfigResult']:
        """
        This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('pulumi:providers:clickhousedbops/terraformConfig', __args__, res=__self__, typ=Provider.TerraformConfigResult)

