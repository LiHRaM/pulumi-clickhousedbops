# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SettingsProfileArgs', 'SettingsProfile']

@pulumi.input_type
class SettingsProfileArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 inherit_froms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SettingsProfile resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] inherit_froms: List of setting profile names to inherit from
        :param pulumi.Input[_builtins.str] name: Name of the settings profile
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if inherit_froms is not None:
            pulumi.set(__self__, "inherit_froms", inherit_froms)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="inheritFroms")
    def inherit_froms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of setting profile names to inherit from
        """
        return pulumi.get(self, "inherit_froms")

    @inherit_froms.setter
    def inherit_froms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "inherit_froms", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the settings profile
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _SettingsProfileState:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 inherit_froms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SettingsProfile resources.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] inherit_froms: List of setting profile names to inherit from
        :param pulumi.Input[_builtins.str] name: Name of the settings profile
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if inherit_froms is not None:
            pulumi.set(__self__, "inherit_froms", inherit_froms)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter(name="inheritFroms")
    def inherit_froms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of setting profile names to inherit from
        """
        return pulumi.get(self, "inherit_froms")

    @inherit_froms.setter
    def inherit_froms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "inherit_froms", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the settings profile
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.type_token("clickhousedbops:index/settingsProfile:SettingsProfile")
class SettingsProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 inherit_froms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        You can use the `SettingsProfile` resource to create a `Setting Profile` in a `ClickHouse` instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_clickhousedbops as clickhousedbops

        profile1 = clickhousedbops.SettingsProfile("profile1",
            cluster_name="cluster",
            name="profile1")
        ```

        ## Import

        Settings profiles can be imported by specifying the UUID.

        Find the ID of the settings profile by checking system.settings_profiles table.

        ```sh
        $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        ```

        It's also possible to import settings profiles by name:

        ```sh
        $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example name
        ```

        IMPORTANT: if you have a multi node cluster, you need to specify the cluster name!

        ```sh
        $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example cluster:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        ```

        ```sh
        $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example cluster:name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] inherit_froms: List of setting profile names to inherit from
        :param pulumi.Input[_builtins.str] name: Name of the settings profile
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingsProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        You can use the `SettingsProfile` resource to create a `Setting Profile` in a `ClickHouse` instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_clickhousedbops as clickhousedbops

        profile1 = clickhousedbops.SettingsProfile("profile1",
            cluster_name="cluster",
            name="profile1")
        ```

        ## Import

        Settings profiles can be imported by specifying the UUID.

        Find the ID of the settings profile by checking system.settings_profiles table.

        ```sh
        $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        ```

        It's also possible to import settings profiles by name:

        ```sh
        $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example name
        ```

        IMPORTANT: if you have a multi node cluster, you need to specify the cluster name!

        ```sh
        $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example cluster:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        ```

        ```sh
        $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example cluster:name
        ```

        :param str resource_name: The name of the resource.
        :param SettingsProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingsProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 inherit_froms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingsProfileArgs.__new__(SettingsProfileArgs)

            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["inherit_froms"] = inherit_froms
            __props__.__dict__["name"] = name
        super(SettingsProfile, __self__).__init__(
            'clickhousedbops:index/settingsProfile:SettingsProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            inherit_froms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None) -> 'SettingsProfile':
        """
        Get an existing SettingsProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] inherit_froms: List of setting profile names to inherit from
        :param pulumi.Input[_builtins.str] name: Name of the settings profile
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingsProfileState.__new__(_SettingsProfileState)

        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["inherit_froms"] = inherit_froms
        __props__.__dict__["name"] = name
        return SettingsProfile(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter(name="inheritFroms")
    def inherit_froms(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of setting profile names to inherit from
        """
        return pulumi.get(self, "inherit_froms")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the settings profile
        """
        return pulumi.get(self, "name")

