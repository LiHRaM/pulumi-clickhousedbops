# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DatabaseArgs', 'Database']

@pulumi.input_type
class DatabaseArgs:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Database resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               Should be set when hitting a cluster with more than one replica.
        :param pulumi.Input[_builtins.str] comment: Comment associated with the database
        :param pulumi.Input[_builtins.str] name: Name of the database
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        Should be set when hitting a cluster with more than one replica.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Comment associated with the database
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comment", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DatabaseState:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 uuid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Database resources.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               Should be set when hitting a cluster with more than one replica.
        :param pulumi.Input[_builtins.str] comment: Comment associated with the database
        :param pulumi.Input[_builtins.str] name: Name of the database
        :param pulumi.Input[_builtins.str] uuid: The system-assigned UUID for the database
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        Should be set when hitting a cluster with more than one replica.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @_builtins.property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Comment associated with the database
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comment", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The system-assigned UUID for the database
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uuid", value)


@pulumi.type_token("clickhousedbops:index/database:Database")
class Database(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Use the *clickhousedbops_database* resource to create a database in a ClickHouse instance.

        Known limitations:

        - Changing the comment on a `database` resource is unsupported and will cause the database to be destroyed and recreated. WARNING: you will lose any content of the database if you do so!

        ## Example Usage

        ```python
        import pulumi
        import pulumi_clickhousedbops as clickhousedbops

        logs = clickhousedbops.Database("logs",
            cluster_name="cluster",
            name="logs")
        ```

        ## Import

        Databases can be imported by specifying the UUID.

        Find the UUID of the database by checking system.databases table.

        ```sh
        $ pulumi import clickhousedbops:index/database:Database example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        ```

        It's also possible to import databases using the name:

        ```sh
        $ pulumi import clickhousedbops:index/database:Database example databasename
        ```

        IMPORTANT: if you have a multi node cluster, you need to specify the cluster name!

        ```sh
        $ pulumi import clickhousedbops:index/database:Database example cluster:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        ```

        ```sh
        $ pulumi import clickhousedbops:index/database:Database example cluster:databasename
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               Should be set when hitting a cluster with more than one replica.
        :param pulumi.Input[_builtins.str] comment: Comment associated with the database
        :param pulumi.Input[_builtins.str] name: Name of the database
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DatabaseArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use the *clickhousedbops_database* resource to create a database in a ClickHouse instance.

        Known limitations:

        - Changing the comment on a `database` resource is unsupported and will cause the database to be destroyed and recreated. WARNING: you will lose any content of the database if you do so!

        ## Example Usage

        ```python
        import pulumi
        import pulumi_clickhousedbops as clickhousedbops

        logs = clickhousedbops.Database("logs",
            cluster_name="cluster",
            name="logs")
        ```

        ## Import

        Databases can be imported by specifying the UUID.

        Find the UUID of the database by checking system.databases table.

        ```sh
        $ pulumi import clickhousedbops:index/database:Database example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        ```

        It's also possible to import databases using the name:

        ```sh
        $ pulumi import clickhousedbops:index/database:Database example databasename
        ```

        IMPORTANT: if you have a multi node cluster, you need to specify the cluster name!

        ```sh
        $ pulumi import clickhousedbops:index/database:Database example cluster:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        ```

        ```sh
        $ pulumi import clickhousedbops:index/database:Database example cluster:databasename
        ```

        :param str resource_name: The name of the resource.
        :param DatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
                 comment: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabaseArgs.__new__(DatabaseArgs)

            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["comment"] = comment
            __props__.__dict__["name"] = name
            __props__.__dict__["uuid"] = None
        super(Database, __self__).__init__(
            'clickhousedbops:index/database:Database',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_name: Optional[pulumi.Input[_builtins.str]] = None,
            comment: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            uuid: Optional[pulumi.Input[_builtins.str]] = None) -> 'Database':
        """
        Get an existing Database resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_name: Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
               This field must be left null when using a ClickHouse Cloud cluster.
               Should be set when hitting a cluster with more than one replica.
        :param pulumi.Input[_builtins.str] comment: Comment associated with the database
        :param pulumi.Input[_builtins.str] name: Name of the database
        :param pulumi.Input[_builtins.str] uuid: The system-assigned UUID for the database
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatabaseState.__new__(_DatabaseState)

        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["comment"] = comment
        __props__.__dict__["name"] = name
        __props__.__dict__["uuid"] = uuid
        return Database(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
        This field must be left null when using a ClickHouse Cloud cluster.
        Should be set when hitting a cluster with more than one replica.
        """
        return pulumi.get(self, "cluster_name")

    @_builtins.property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Comment associated with the database
        """
        return pulumi.get(self, "comment")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the database
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[_builtins.str]:
        """
        The system-assigned UUID for the database
        """
        return pulumi.get(self, "uuid")

