// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhousedbops

import (
	"context"
	"reflect"

	"errors"
	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clickhousedbops.NewGrantPrivilege(ctx, "grant", &clickhousedbops.GrantPrivilegeArgs{
//				PrivilegeName:   pulumi.String("SELECT"),
//				DatabaseName:    pulumi.String("default"),
//				TableName:       pulumi.String("tbl1"),
//				ColumnName:      pulumi.String("count"),
//				GranteeUserName: pulumi.String("my_user_name"),
//				GrantOption:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type GrantPrivilege struct {
	pulumi.CustomResourceState

	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// The name of the column in `tableName` to grant privilege on.
	ColumnName pulumi.StringPtrOutput `pulumi:"columnName"`
	// The name of the database to grant privilege on. Defaults to all databases if left null
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// If true, the grantee will be able to grant the same privileges to others.
	GrantOption pulumi.BoolOutput `pulumi:"grantOption"`
	// Name of the `role` to grant privileges to.
	GranteeRoleName pulumi.StringPtrOutput `pulumi:"granteeRoleName"`
	// Name of the `user` to grant privileges to.
	GranteeUserName pulumi.StringPtrOutput `pulumi:"granteeUserName"`
	// The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
	PrivilegeName pulumi.StringOutput `pulumi:"privilegeName"`
	// The name of the table to grant privilege on.
	TableName pulumi.StringPtrOutput `pulumi:"tableName"`
}

// NewGrantPrivilege registers a new resource with the given unique name, arguments, and options.
func NewGrantPrivilege(ctx *pulumi.Context,
	name string, args *GrantPrivilegeArgs, opts ...pulumi.ResourceOption) (*GrantPrivilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivilegeName == nil {
		return nil, errors.New("invalid value for required argument 'PrivilegeName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GrantPrivilege
	err := ctx.RegisterResource("clickhousedbops:index/grantPrivilege:GrantPrivilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrantPrivilege gets an existing GrantPrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrantPrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrantPrivilegeState, opts ...pulumi.ResourceOption) (*GrantPrivilege, error) {
	var resource GrantPrivilege
	err := ctx.ReadResource("clickhousedbops:index/grantPrivilege:GrantPrivilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrantPrivilege resources.
type grantPrivilegeState struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName *string `pulumi:"clusterName"`
	// The name of the column in `tableName` to grant privilege on.
	ColumnName *string `pulumi:"columnName"`
	// The name of the database to grant privilege on. Defaults to all databases if left null
	DatabaseName *string `pulumi:"databaseName"`
	// If true, the grantee will be able to grant the same privileges to others.
	GrantOption *bool `pulumi:"grantOption"`
	// Name of the `role` to grant privileges to.
	GranteeRoleName *string `pulumi:"granteeRoleName"`
	// Name of the `user` to grant privileges to.
	GranteeUserName *string `pulumi:"granteeUserName"`
	// The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
	PrivilegeName *string `pulumi:"privilegeName"`
	// The name of the table to grant privilege on.
	TableName *string `pulumi:"tableName"`
}

type GrantPrivilegeState struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrInput
	// The name of the column in `tableName` to grant privilege on.
	ColumnName pulumi.StringPtrInput
	// The name of the database to grant privilege on. Defaults to all databases if left null
	DatabaseName pulumi.StringPtrInput
	// If true, the grantee will be able to grant the same privileges to others.
	GrantOption pulumi.BoolPtrInput
	// Name of the `role` to grant privileges to.
	GranteeRoleName pulumi.StringPtrInput
	// Name of the `user` to grant privileges to.
	GranteeUserName pulumi.StringPtrInput
	// The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
	PrivilegeName pulumi.StringPtrInput
	// The name of the table to grant privilege on.
	TableName pulumi.StringPtrInput
}

func (GrantPrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*grantPrivilegeState)(nil)).Elem()
}

type grantPrivilegeArgs struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName *string `pulumi:"clusterName"`
	// The name of the column in `tableName` to grant privilege on.
	ColumnName *string `pulumi:"columnName"`
	// The name of the database to grant privilege on. Defaults to all databases if left null
	DatabaseName *string `pulumi:"databaseName"`
	// If true, the grantee will be able to grant the same privileges to others.
	GrantOption *bool `pulumi:"grantOption"`
	// Name of the `role` to grant privileges to.
	GranteeRoleName *string `pulumi:"granteeRoleName"`
	// Name of the `user` to grant privileges to.
	GranteeUserName *string `pulumi:"granteeUserName"`
	// The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
	PrivilegeName string `pulumi:"privilegeName"`
	// The name of the table to grant privilege on.
	TableName *string `pulumi:"tableName"`
}

// The set of arguments for constructing a GrantPrivilege resource.
type GrantPrivilegeArgs struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrInput
	// The name of the column in `tableName` to grant privilege on.
	ColumnName pulumi.StringPtrInput
	// The name of the database to grant privilege on. Defaults to all databases if left null
	DatabaseName pulumi.StringPtrInput
	// If true, the grantee will be able to grant the same privileges to others.
	GrantOption pulumi.BoolPtrInput
	// Name of the `role` to grant privileges to.
	GranteeRoleName pulumi.StringPtrInput
	// Name of the `user` to grant privileges to.
	GranteeUserName pulumi.StringPtrInput
	// The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
	PrivilegeName pulumi.StringInput
	// The name of the table to grant privilege on.
	TableName pulumi.StringPtrInput
}

func (GrantPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grantPrivilegeArgs)(nil)).Elem()
}

type GrantPrivilegeInput interface {
	pulumi.Input

	ToGrantPrivilegeOutput() GrantPrivilegeOutput
	ToGrantPrivilegeOutputWithContext(ctx context.Context) GrantPrivilegeOutput
}

func (*GrantPrivilege) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilege)(nil)).Elem()
}

func (i *GrantPrivilege) ToGrantPrivilegeOutput() GrantPrivilegeOutput {
	return i.ToGrantPrivilegeOutputWithContext(context.Background())
}

func (i *GrantPrivilege) ToGrantPrivilegeOutputWithContext(ctx context.Context) GrantPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegeOutput)
}

// GrantPrivilegeArrayInput is an input type that accepts GrantPrivilegeArray and GrantPrivilegeArrayOutput values.
// You can construct a concrete instance of `GrantPrivilegeArrayInput` via:
//
//	GrantPrivilegeArray{ GrantPrivilegeArgs{...} }
type GrantPrivilegeArrayInput interface {
	pulumi.Input

	ToGrantPrivilegeArrayOutput() GrantPrivilegeArrayOutput
	ToGrantPrivilegeArrayOutputWithContext(context.Context) GrantPrivilegeArrayOutput
}

type GrantPrivilegeArray []GrantPrivilegeInput

func (GrantPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrantPrivilege)(nil)).Elem()
}

func (i GrantPrivilegeArray) ToGrantPrivilegeArrayOutput() GrantPrivilegeArrayOutput {
	return i.ToGrantPrivilegeArrayOutputWithContext(context.Background())
}

func (i GrantPrivilegeArray) ToGrantPrivilegeArrayOutputWithContext(ctx context.Context) GrantPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegeArrayOutput)
}

// GrantPrivilegeMapInput is an input type that accepts GrantPrivilegeMap and GrantPrivilegeMapOutput values.
// You can construct a concrete instance of `GrantPrivilegeMapInput` via:
//
//	GrantPrivilegeMap{ "key": GrantPrivilegeArgs{...} }
type GrantPrivilegeMapInput interface {
	pulumi.Input

	ToGrantPrivilegeMapOutput() GrantPrivilegeMapOutput
	ToGrantPrivilegeMapOutputWithContext(context.Context) GrantPrivilegeMapOutput
}

type GrantPrivilegeMap map[string]GrantPrivilegeInput

func (GrantPrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrantPrivilege)(nil)).Elem()
}

func (i GrantPrivilegeMap) ToGrantPrivilegeMapOutput() GrantPrivilegeMapOutput {
	return i.ToGrantPrivilegeMapOutputWithContext(context.Background())
}

func (i GrantPrivilegeMap) ToGrantPrivilegeMapOutputWithContext(ctx context.Context) GrantPrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPrivilegeMapOutput)
}

type GrantPrivilegeOutput struct{ *pulumi.OutputState }

func (GrantPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPrivilege)(nil)).Elem()
}

func (o GrantPrivilegeOutput) ToGrantPrivilegeOutput() GrantPrivilegeOutput {
	return o
}

func (o GrantPrivilegeOutput) ToGrantPrivilegeOutputWithContext(ctx context.Context) GrantPrivilegeOutput {
	return o
}

// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
// This field must be left null when using a ClickHouse Cloud cluster.
// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
func (o GrantPrivilegeOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilege) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// The name of the column in `tableName` to grant privilege on.
func (o GrantPrivilegeOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilege) pulumi.StringPtrOutput { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// The name of the database to grant privilege on. Defaults to all databases if left null
func (o GrantPrivilegeOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilege) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// If true, the grantee will be able to grant the same privileges to others.
func (o GrantPrivilegeOutput) GrantOption() pulumi.BoolOutput {
	return o.ApplyT(func(v *GrantPrivilege) pulumi.BoolOutput { return v.GrantOption }).(pulumi.BoolOutput)
}

// Name of the `role` to grant privileges to.
func (o GrantPrivilegeOutput) GranteeRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilege) pulumi.StringPtrOutput { return v.GranteeRoleName }).(pulumi.StringPtrOutput)
}

// Name of the `user` to grant privileges to.
func (o GrantPrivilegeOutput) GranteeUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilege) pulumi.StringPtrOutput { return v.GranteeUserName }).(pulumi.StringPtrOutput)
}

// The privilege to grant, such as `CREATE DATABASE`, `SELECT`, etc. See https://clickhouse.com/docs/en/sql-reference/statements/grant#privileges.
func (o GrantPrivilegeOutput) PrivilegeName() pulumi.StringOutput {
	return o.ApplyT(func(v *GrantPrivilege) pulumi.StringOutput { return v.PrivilegeName }).(pulumi.StringOutput)
}

// The name of the table to grant privilege on.
func (o GrantPrivilegeOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPrivilege) pulumi.StringPtrOutput { return v.TableName }).(pulumi.StringPtrOutput)
}

type GrantPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (GrantPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrantPrivilege)(nil)).Elem()
}

func (o GrantPrivilegeArrayOutput) ToGrantPrivilegeArrayOutput() GrantPrivilegeArrayOutput {
	return o
}

func (o GrantPrivilegeArrayOutput) ToGrantPrivilegeArrayOutputWithContext(ctx context.Context) GrantPrivilegeArrayOutput {
	return o
}

func (o GrantPrivilegeArrayOutput) Index(i pulumi.IntInput) GrantPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrantPrivilege {
		return vs[0].([]*GrantPrivilege)[vs[1].(int)]
	}).(GrantPrivilegeOutput)
}

type GrantPrivilegeMapOutput struct{ *pulumi.OutputState }

func (GrantPrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrantPrivilege)(nil)).Elem()
}

func (o GrantPrivilegeMapOutput) ToGrantPrivilegeMapOutput() GrantPrivilegeMapOutput {
	return o
}

func (o GrantPrivilegeMapOutput) ToGrantPrivilegeMapOutputWithContext(ctx context.Context) GrantPrivilegeMapOutput {
	return o
}

func (o GrantPrivilegeMapOutput) MapIndex(k pulumi.StringInput) GrantPrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrantPrivilege {
		return vs[0].(map[string]*GrantPrivilege)[vs[1].(string)]
	}).(GrantPrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegeInput)(nil)).Elem(), &GrantPrivilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegeArrayInput)(nil)).Elem(), GrantPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPrivilegeMapInput)(nil)).Elem(), GrantPrivilegeMap{})
	pulumi.RegisterOutputType(GrantPrivilegeOutput{})
	pulumi.RegisterOutputType(GrantPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(GrantPrivilegeMapOutput{})
}
