// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhousedbops

import (
	"context"
	"reflect"

	"errors"
	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clickhousedbops.NewGrantRole(ctx, "role_to_user", &clickhousedbops.GrantRoleArgs{
//				ClusterName:     pulumi.String("cluster"),
//				RoleName:        pulumi.String("myrole"),
//				GranteeUserName: pulumi.String("myuser"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type GrantRole struct {
	pulumi.CustomResourceState

	// If true, the grantee will be able to grant `roleName` to other `users` or `roles`.
	AdminOption pulumi.BoolOutput `pulumi:"adminOption"`
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// Name of the `role` to grant `roleName` to.
	GranteeRoleName pulumi.StringPtrOutput `pulumi:"granteeRoleName"`
	// Name of the `user` to grant `roleName` to.
	GranteeUserName pulumi.StringPtrOutput `pulumi:"granteeUserName"`
	// Name of the role to be granted
	RoleName pulumi.StringOutput `pulumi:"roleName"`
}

// NewGrantRole registers a new resource with the given unique name, arguments, and options.
func NewGrantRole(ctx *pulumi.Context,
	name string, args *GrantRoleArgs, opts ...pulumi.ResourceOption) (*GrantRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GrantRole
	err := ctx.RegisterResource("clickhousedbops:index/grantRole:GrantRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrantRole gets an existing GrantRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrantRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrantRoleState, opts ...pulumi.ResourceOption) (*GrantRole, error) {
	var resource GrantRole
	err := ctx.ReadResource("clickhousedbops:index/grantRole:GrantRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrantRole resources.
type grantRoleState struct {
	// If true, the grantee will be able to grant `roleName` to other `users` or `roles`.
	AdminOption *bool `pulumi:"adminOption"`
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName *string `pulumi:"clusterName"`
	// Name of the `role` to grant `roleName` to.
	GranteeRoleName *string `pulumi:"granteeRoleName"`
	// Name of the `user` to grant `roleName` to.
	GranteeUserName *string `pulumi:"granteeUserName"`
	// Name of the role to be granted
	RoleName *string `pulumi:"roleName"`
}

type GrantRoleState struct {
	// If true, the grantee will be able to grant `roleName` to other `users` or `roles`.
	AdminOption pulumi.BoolPtrInput
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrInput
	// Name of the `role` to grant `roleName` to.
	GranteeRoleName pulumi.StringPtrInput
	// Name of the `user` to grant `roleName` to.
	GranteeUserName pulumi.StringPtrInput
	// Name of the role to be granted
	RoleName pulumi.StringPtrInput
}

func (GrantRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*grantRoleState)(nil)).Elem()
}

type grantRoleArgs struct {
	// If true, the grantee will be able to grant `roleName` to other `users` or `roles`.
	AdminOption *bool `pulumi:"adminOption"`
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName *string `pulumi:"clusterName"`
	// Name of the `role` to grant `roleName` to.
	GranteeRoleName *string `pulumi:"granteeRoleName"`
	// Name of the `user` to grant `roleName` to.
	GranteeUserName *string `pulumi:"granteeUserName"`
	// Name of the role to be granted
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a GrantRole resource.
type GrantRoleArgs struct {
	// If true, the grantee will be able to grant `roleName` to other `users` or `roles`.
	AdminOption pulumi.BoolPtrInput
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrInput
	// Name of the `role` to grant `roleName` to.
	GranteeRoleName pulumi.StringPtrInput
	// Name of the `user` to grant `roleName` to.
	GranteeUserName pulumi.StringPtrInput
	// Name of the role to be granted
	RoleName pulumi.StringInput
}

func (GrantRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grantRoleArgs)(nil)).Elem()
}

type GrantRoleInput interface {
	pulumi.Input

	ToGrantRoleOutput() GrantRoleOutput
	ToGrantRoleOutputWithContext(ctx context.Context) GrantRoleOutput
}

func (*GrantRole) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantRole)(nil)).Elem()
}

func (i *GrantRole) ToGrantRoleOutput() GrantRoleOutput {
	return i.ToGrantRoleOutputWithContext(context.Background())
}

func (i *GrantRole) ToGrantRoleOutputWithContext(ctx context.Context) GrantRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantRoleOutput)
}

// GrantRoleArrayInput is an input type that accepts GrantRoleArray and GrantRoleArrayOutput values.
// You can construct a concrete instance of `GrantRoleArrayInput` via:
//
//	GrantRoleArray{ GrantRoleArgs{...} }
type GrantRoleArrayInput interface {
	pulumi.Input

	ToGrantRoleArrayOutput() GrantRoleArrayOutput
	ToGrantRoleArrayOutputWithContext(context.Context) GrantRoleArrayOutput
}

type GrantRoleArray []GrantRoleInput

func (GrantRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrantRole)(nil)).Elem()
}

func (i GrantRoleArray) ToGrantRoleArrayOutput() GrantRoleArrayOutput {
	return i.ToGrantRoleArrayOutputWithContext(context.Background())
}

func (i GrantRoleArray) ToGrantRoleArrayOutputWithContext(ctx context.Context) GrantRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantRoleArrayOutput)
}

// GrantRoleMapInput is an input type that accepts GrantRoleMap and GrantRoleMapOutput values.
// You can construct a concrete instance of `GrantRoleMapInput` via:
//
//	GrantRoleMap{ "key": GrantRoleArgs{...} }
type GrantRoleMapInput interface {
	pulumi.Input

	ToGrantRoleMapOutput() GrantRoleMapOutput
	ToGrantRoleMapOutputWithContext(context.Context) GrantRoleMapOutput
}

type GrantRoleMap map[string]GrantRoleInput

func (GrantRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrantRole)(nil)).Elem()
}

func (i GrantRoleMap) ToGrantRoleMapOutput() GrantRoleMapOutput {
	return i.ToGrantRoleMapOutputWithContext(context.Background())
}

func (i GrantRoleMap) ToGrantRoleMapOutputWithContext(ctx context.Context) GrantRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantRoleMapOutput)
}

type GrantRoleOutput struct{ *pulumi.OutputState }

func (GrantRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantRole)(nil)).Elem()
}

func (o GrantRoleOutput) ToGrantRoleOutput() GrantRoleOutput {
	return o
}

func (o GrantRoleOutput) ToGrantRoleOutputWithContext(ctx context.Context) GrantRoleOutput {
	return o
}

// If true, the grantee will be able to grant `roleName` to other `users` or `roles`.
func (o GrantRoleOutput) AdminOption() pulumi.BoolOutput {
	return o.ApplyT(func(v *GrantRole) pulumi.BoolOutput { return v.AdminOption }).(pulumi.BoolOutput)
}

// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
// This field must be left null when using a ClickHouse Cloud cluster.
// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
func (o GrantRoleOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantRole) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// Name of the `role` to grant `roleName` to.
func (o GrantRoleOutput) GranteeRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantRole) pulumi.StringPtrOutput { return v.GranteeRoleName }).(pulumi.StringPtrOutput)
}

// Name of the `user` to grant `roleName` to.
func (o GrantRoleOutput) GranteeUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantRole) pulumi.StringPtrOutput { return v.GranteeUserName }).(pulumi.StringPtrOutput)
}

// Name of the role to be granted
func (o GrantRoleOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *GrantRole) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

type GrantRoleArrayOutput struct{ *pulumi.OutputState }

func (GrantRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrantRole)(nil)).Elem()
}

func (o GrantRoleArrayOutput) ToGrantRoleArrayOutput() GrantRoleArrayOutput {
	return o
}

func (o GrantRoleArrayOutput) ToGrantRoleArrayOutputWithContext(ctx context.Context) GrantRoleArrayOutput {
	return o
}

func (o GrantRoleArrayOutput) Index(i pulumi.IntInput) GrantRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrantRole {
		return vs[0].([]*GrantRole)[vs[1].(int)]
	}).(GrantRoleOutput)
}

type GrantRoleMapOutput struct{ *pulumi.OutputState }

func (GrantRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrantRole)(nil)).Elem()
}

func (o GrantRoleMapOutput) ToGrantRoleMapOutput() GrantRoleMapOutput {
	return o
}

func (o GrantRoleMapOutput) ToGrantRoleMapOutputWithContext(ctx context.Context) GrantRoleMapOutput {
	return o
}

func (o GrantRoleMapOutput) MapIndex(k pulumi.StringInput) GrantRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrantRole {
		return vs[0].(map[string]*GrantRole)[vs[1].(string)]
	}).(GrantRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrantRoleInput)(nil)).Elem(), &GrantRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantRoleArrayInput)(nil)).Elem(), GrantRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantRoleMapInput)(nil)).Elem(), GrantRoleMap{})
	pulumi.RegisterOutputType(GrantRoleOutput{})
	pulumi.RegisterOutputType(GrantRoleArrayOutput{})
	pulumi.RegisterOutputType(GrantRoleMapOutput{})
}
