// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhousedbops

import (
	"context"
	"reflect"

	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the *clickhousedbops_database* resource to create a database in a ClickHouse instance.
//
// Known limitations:
//
// - Changing the comment on a `database` resource is unsupported and will cause the database to be destroyed and recreated. WARNING: you will lose any content of the database if you do so!
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clickhousedbops.NewDatabase(ctx, "logs", &clickhousedbops.DatabaseArgs{
//				ClusterName: pulumi.String("cluster"),
//				Name:        pulumi.String("logs"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Databases can be imported by specifying the UUID.
//
// Find the UUID of the database by checking system.databases table.
//
// ```sh
// $ pulumi import clickhousedbops:index/database:Database example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
// ```
//
// It's also possible to import databases using the name:
//
// ```sh
// $ pulumi import clickhousedbops:index/database:Database example databasename
// ```
//
// IMPORTANT: if you have a multi node cluster, you need to specify the cluster name!
//
// ```sh
// $ pulumi import clickhousedbops:index/database:Database example cluster:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
// ```
//
// ```sh
// $ pulumi import clickhousedbops:index/database:Database example cluster:databasename
// ```
type Database struct {
	pulumi.CustomResourceState

	// Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// Should be set when hitting a cluster with more than one replica.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// Comment associated with the database
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Name of the database
	Name pulumi.StringOutput `pulumi:"name"`
	// The system-assigned UUID for the database
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		args = &DatabaseArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("clickhousedbops:index/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("clickhousedbops:index/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// Should be set when hitting a cluster with more than one replica.
	ClusterName *string `pulumi:"clusterName"`
	// Comment associated with the database
	Comment *string `pulumi:"comment"`
	// Name of the database
	Name *string `pulumi:"name"`
	// The system-assigned UUID for the database
	Uuid *string `pulumi:"uuid"`
}

type DatabaseState struct {
	// Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// Should be set when hitting a cluster with more than one replica.
	ClusterName pulumi.StringPtrInput
	// Comment associated with the database
	Comment pulumi.StringPtrInput
	// Name of the database
	Name pulumi.StringPtrInput
	// The system-assigned UUID for the database
	Uuid pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// Should be set when hitting a cluster with more than one replica.
	ClusterName *string `pulumi:"clusterName"`
	// Comment associated with the database
	Comment *string `pulumi:"comment"`
	// Name of the database
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// Should be set when hitting a cluster with more than one replica.
	ClusterName pulumi.StringPtrInput
	// Comment associated with the database
	Comment pulumi.StringPtrInput
	// Name of the database
	Name pulumi.StringPtrInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//	DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//	DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

// Name of the cluster to create the database into. If omitted, the database will be created on the replica hit by the query.
// This field must be left null when using a ClickHouse Cloud cluster.
// Should be set when hitting a cluster with more than one replica.
func (o DatabaseOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// Comment associated with the database
func (o DatabaseOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Name of the database
func (o DatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The system-assigned UUID for the database
func (o DatabaseOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
