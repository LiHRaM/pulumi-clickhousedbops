// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhousedbops

import (
	"context"
	"reflect"

	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ProviderAuthConfig struct {
	// The password to use to authenticate to ClickHouse
	Password *string `pulumi:"password"`
	// The authentication method to use
	Strategy string `pulumi:"strategy"`
	// The username to use to authenticate to ClickHouse
	Username string `pulumi:"username"`
}

// ProviderAuthConfigInput is an input type that accepts ProviderAuthConfigArgs and ProviderAuthConfigOutput values.
// You can construct a concrete instance of `ProviderAuthConfigInput` via:
//
//	ProviderAuthConfigArgs{...}
type ProviderAuthConfigInput interface {
	pulumi.Input

	ToProviderAuthConfigOutput() ProviderAuthConfigOutput
	ToProviderAuthConfigOutputWithContext(context.Context) ProviderAuthConfigOutput
}

type ProviderAuthConfigArgs struct {
	// The password to use to authenticate to ClickHouse
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The authentication method to use
	Strategy pulumi.StringInput `pulumi:"strategy"`
	// The username to use to authenticate to ClickHouse
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProviderAuthConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthConfig)(nil)).Elem()
}

func (i ProviderAuthConfigArgs) ToProviderAuthConfigOutput() ProviderAuthConfigOutput {
	return i.ToProviderAuthConfigOutputWithContext(context.Background())
}

func (i ProviderAuthConfigArgs) ToProviderAuthConfigOutputWithContext(ctx context.Context) ProviderAuthConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthConfigOutput)
}

func (i ProviderAuthConfigArgs) ToProviderAuthConfigPtrOutput() ProviderAuthConfigPtrOutput {
	return i.ToProviderAuthConfigPtrOutputWithContext(context.Background())
}

func (i ProviderAuthConfigArgs) ToProviderAuthConfigPtrOutputWithContext(ctx context.Context) ProviderAuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthConfigOutput).ToProviderAuthConfigPtrOutputWithContext(ctx)
}

// ProviderAuthConfigPtrInput is an input type that accepts ProviderAuthConfigArgs, ProviderAuthConfigPtr and ProviderAuthConfigPtrOutput values.
// You can construct a concrete instance of `ProviderAuthConfigPtrInput` via:
//
//	        ProviderAuthConfigArgs{...}
//
//	or:
//
//	        nil
type ProviderAuthConfigPtrInput interface {
	pulumi.Input

	ToProviderAuthConfigPtrOutput() ProviderAuthConfigPtrOutput
	ToProviderAuthConfigPtrOutputWithContext(context.Context) ProviderAuthConfigPtrOutput
}

type providerAuthConfigPtrType ProviderAuthConfigArgs

func ProviderAuthConfigPtr(v *ProviderAuthConfigArgs) ProviderAuthConfigPtrInput {
	return (*providerAuthConfigPtrType)(v)
}

func (*providerAuthConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthConfig)(nil)).Elem()
}

func (i *providerAuthConfigPtrType) ToProviderAuthConfigPtrOutput() ProviderAuthConfigPtrOutput {
	return i.ToProviderAuthConfigPtrOutputWithContext(context.Background())
}

func (i *providerAuthConfigPtrType) ToProviderAuthConfigPtrOutputWithContext(ctx context.Context) ProviderAuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAuthConfigPtrOutput)
}

type ProviderAuthConfigOutput struct{ *pulumi.OutputState }

func (ProviderAuthConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAuthConfig)(nil)).Elem()
}

func (o ProviderAuthConfigOutput) ToProviderAuthConfigOutput() ProviderAuthConfigOutput {
	return o
}

func (o ProviderAuthConfigOutput) ToProviderAuthConfigOutputWithContext(ctx context.Context) ProviderAuthConfigOutput {
	return o
}

func (o ProviderAuthConfigOutput) ToProviderAuthConfigPtrOutput() ProviderAuthConfigPtrOutput {
	return o.ToProviderAuthConfigPtrOutputWithContext(context.Background())
}

func (o ProviderAuthConfigOutput) ToProviderAuthConfigPtrOutputWithContext(ctx context.Context) ProviderAuthConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAuthConfig) *ProviderAuthConfig {
		return &v
	}).(ProviderAuthConfigPtrOutput)
}

// The password to use to authenticate to ClickHouse
func (o ProviderAuthConfigOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAuthConfig) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The authentication method to use
func (o ProviderAuthConfigOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthConfig) string { return v.Strategy }).(pulumi.StringOutput)
}

// The username to use to authenticate to ClickHouse
func (o ProviderAuthConfigOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAuthConfig) string { return v.Username }).(pulumi.StringOutput)
}

type ProviderAuthConfigPtrOutput struct{ *pulumi.OutputState }

func (ProviderAuthConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAuthConfig)(nil)).Elem()
}

func (o ProviderAuthConfigPtrOutput) ToProviderAuthConfigPtrOutput() ProviderAuthConfigPtrOutput {
	return o
}

func (o ProviderAuthConfigPtrOutput) ToProviderAuthConfigPtrOutputWithContext(ctx context.Context) ProviderAuthConfigPtrOutput {
	return o
}

func (o ProviderAuthConfigPtrOutput) Elem() ProviderAuthConfigOutput {
	return o.ApplyT(func(v *ProviderAuthConfig) ProviderAuthConfig {
		if v != nil {
			return *v
		}
		var ret ProviderAuthConfig
		return ret
	}).(ProviderAuthConfigOutput)
}

// The password to use to authenticate to ClickHouse
func (o ProviderAuthConfigPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthConfig) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The authentication method to use
func (o ProviderAuthConfigPtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Strategy
	}).(pulumi.StringPtrOutput)
}

// The username to use to authenticate to ClickHouse
func (o ProviderAuthConfigPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAuthConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ProviderTlsConfig struct {
	// Skip TLS cert verification when using the https protocol. This is insecure!
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
}

// ProviderTlsConfigInput is an input type that accepts ProviderTlsConfigArgs and ProviderTlsConfigOutput values.
// You can construct a concrete instance of `ProviderTlsConfigInput` via:
//
//	ProviderTlsConfigArgs{...}
type ProviderTlsConfigInput interface {
	pulumi.Input

	ToProviderTlsConfigOutput() ProviderTlsConfigOutput
	ToProviderTlsConfigOutputWithContext(context.Context) ProviderTlsConfigOutput
}

type ProviderTlsConfigArgs struct {
	// Skip TLS cert verification when using the https protocol. This is insecure!
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
}

func (ProviderTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTlsConfig)(nil)).Elem()
}

func (i ProviderTlsConfigArgs) ToProviderTlsConfigOutput() ProviderTlsConfigOutput {
	return i.ToProviderTlsConfigOutputWithContext(context.Background())
}

func (i ProviderTlsConfigArgs) ToProviderTlsConfigOutputWithContext(ctx context.Context) ProviderTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderTlsConfigOutput)
}

func (i ProviderTlsConfigArgs) ToProviderTlsConfigPtrOutput() ProviderTlsConfigPtrOutput {
	return i.ToProviderTlsConfigPtrOutputWithContext(context.Background())
}

func (i ProviderTlsConfigArgs) ToProviderTlsConfigPtrOutputWithContext(ctx context.Context) ProviderTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderTlsConfigOutput).ToProviderTlsConfigPtrOutputWithContext(ctx)
}

// ProviderTlsConfigPtrInput is an input type that accepts ProviderTlsConfigArgs, ProviderTlsConfigPtr and ProviderTlsConfigPtrOutput values.
// You can construct a concrete instance of `ProviderTlsConfigPtrInput` via:
//
//	        ProviderTlsConfigArgs{...}
//
//	or:
//
//	        nil
type ProviderTlsConfigPtrInput interface {
	pulumi.Input

	ToProviderTlsConfigPtrOutput() ProviderTlsConfigPtrOutput
	ToProviderTlsConfigPtrOutputWithContext(context.Context) ProviderTlsConfigPtrOutput
}

type providerTlsConfigPtrType ProviderTlsConfigArgs

func ProviderTlsConfigPtr(v *ProviderTlsConfigArgs) ProviderTlsConfigPtrInput {
	return (*providerTlsConfigPtrType)(v)
}

func (*providerTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderTlsConfig)(nil)).Elem()
}

func (i *providerTlsConfigPtrType) ToProviderTlsConfigPtrOutput() ProviderTlsConfigPtrOutput {
	return i.ToProviderTlsConfigPtrOutputWithContext(context.Background())
}

func (i *providerTlsConfigPtrType) ToProviderTlsConfigPtrOutputWithContext(ctx context.Context) ProviderTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderTlsConfigPtrOutput)
}

type ProviderTlsConfigOutput struct{ *pulumi.OutputState }

func (ProviderTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTlsConfig)(nil)).Elem()
}

func (o ProviderTlsConfigOutput) ToProviderTlsConfigOutput() ProviderTlsConfigOutput {
	return o
}

func (o ProviderTlsConfigOutput) ToProviderTlsConfigOutputWithContext(ctx context.Context) ProviderTlsConfigOutput {
	return o
}

func (o ProviderTlsConfigOutput) ToProviderTlsConfigPtrOutput() ProviderTlsConfigPtrOutput {
	return o.ToProviderTlsConfigPtrOutputWithContext(context.Background())
}

func (o ProviderTlsConfigOutput) ToProviderTlsConfigPtrOutputWithContext(ctx context.Context) ProviderTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderTlsConfig) *ProviderTlsConfig {
		return &v
	}).(ProviderTlsConfigPtrOutput)
}

// Skip TLS cert verification when using the https protocol. This is insecure!
func (o ProviderTlsConfigOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderTlsConfig) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

type ProviderTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (ProviderTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderTlsConfig)(nil)).Elem()
}

func (o ProviderTlsConfigPtrOutput) ToProviderTlsConfigPtrOutput() ProviderTlsConfigPtrOutput {
	return o
}

func (o ProviderTlsConfigPtrOutput) ToProviderTlsConfigPtrOutputWithContext(ctx context.Context) ProviderTlsConfigPtrOutput {
	return o
}

func (o ProviderTlsConfigPtrOutput) Elem() ProviderTlsConfigOutput {
	return o.ApplyT(func(v *ProviderTlsConfig) ProviderTlsConfig {
		if v != nil {
			return *v
		}
		var ret ProviderTlsConfig
		return ret
	}).(ProviderTlsConfigOutput)
}

// Skip TLS cert verification when using the https protocol. This is insecure!
func (o ProviderTlsConfigPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderTlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthConfigInput)(nil)).Elem(), ProviderAuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAuthConfigPtrInput)(nil)).Elem(), ProviderAuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderTlsConfigInput)(nil)).Elem(), ProviderTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderTlsConfigPtrInput)(nil)).Elem(), ProviderTlsConfigArgs{})
	pulumi.RegisterOutputType(ProviderAuthConfigOutput{})
	pulumi.RegisterOutputType(ProviderAuthConfigPtrOutput{})
	pulumi.RegisterOutputType(ProviderTlsConfigOutput{})
	pulumi.RegisterOutputType(ProviderTlsConfigPtrOutput{})
}
