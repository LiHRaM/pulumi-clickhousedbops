// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhousedbops

import (
	"context"
	"reflect"

	"errors"
	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// You can use the `User` resource to create a user in a `ClickHouse` instance.
//
// Known limitations:
//
// - Changing the `passwordSha256HashWo` field alone does not have any effect. In order to change the password of a user, you also need to bump `passwordSha256HashWoVersion` field.
// - Changing the user's password as described above will cause the database user to be deleted and recreated.
// - When importing an existing user, the `User` resource will be lacking the `passwordSha256HashWoVersion` and thus the subsequent apply will need to recreate the database User in order to set a password.
//
// ## Import
//
// Users can be imported by specifying the ID.
//
// Find the ID of the user by checking system.users table.
//
// WARNING: imported users will be recreated during first 'pulumi up' because the password cannot be imported.
//
// ```sh
// $ pulumi import clickhousedbops:index/user:User example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
// ```
//
// It's also possible to import users using the username:
//
// ```sh
// $ pulumi import clickhousedbops:index/user:User example username
// ```
//
// IMPORTANT: if you have a multi node cluster, you need to specify the cluster name!
//
// ```sh
// $ pulumi import clickhousedbops:index/user:User example cluster:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
// ```
//
// ```sh
// $ pulumi import clickhousedbops:index/user:User example cluster:username
// ```
type User struct {
	pulumi.CustomResourceState

	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster. When using a self hosted ClickHouse instance, this
	// field should only be set when there is more than one replica and you are not using 'replicated' storage for
	// user_directory.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// Name of the user
	Name pulumi.StringOutput `pulumi:"name"`
	// SHA256 hash of the password to be set for the user
	PasswordSha256HashWo pulumi.StringOutput `pulumi:"passwordSha256HashWo"`
	// Version of the passwordSha256HashWo field. Bump this value to require a force update of the password on the user.
	PasswordSha256HashWoVersion pulumi.IntOutput `pulumi:"passwordSha256HashWoVersion"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PasswordSha256HashWo == nil {
		return nil, errors.New("invalid value for required argument 'PasswordSha256HashWo'")
	}
	if args.PasswordSha256HashWoVersion == nil {
		return nil, errors.New("invalid value for required argument 'PasswordSha256HashWoVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("clickhousedbops:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("clickhousedbops:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster. When using a self hosted ClickHouse instance, this
	// field should only be set when there is more than one replica and you are not using 'replicated' storage for
	// user_directory.
	ClusterName *string `pulumi:"clusterName"`
	// Name of the user
	Name *string `pulumi:"name"`
	// SHA256 hash of the password to be set for the user
	PasswordSha256HashWo *string `pulumi:"passwordSha256HashWo"`
	// Version of the passwordSha256HashWo field. Bump this value to require a force update of the password on the user.
	PasswordSha256HashWoVersion *int `pulumi:"passwordSha256HashWoVersion"`
}

type UserState struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster. When using a self hosted ClickHouse instance, this
	// field should only be set when there is more than one replica and you are not using 'replicated' storage for
	// user_directory.
	ClusterName pulumi.StringPtrInput
	// Name of the user
	Name pulumi.StringPtrInput
	// SHA256 hash of the password to be set for the user
	PasswordSha256HashWo pulumi.StringPtrInput
	// Version of the passwordSha256HashWo field. Bump this value to require a force update of the password on the user.
	PasswordSha256HashWoVersion pulumi.IntPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster. When using a self hosted ClickHouse instance, this
	// field should only be set when there is more than one replica and you are not using 'replicated' storage for
	// user_directory.
	ClusterName *string `pulumi:"clusterName"`
	// Name of the user
	Name *string `pulumi:"name"`
	// SHA256 hash of the password to be set for the user
	PasswordSha256HashWo string `pulumi:"passwordSha256HashWo"`
	// Version of the passwordSha256HashWo field. Bump this value to require a force update of the password on the user.
	PasswordSha256HashWoVersion int `pulumi:"passwordSha256HashWoVersion"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster. When using a self hosted ClickHouse instance, this
	// field should only be set when there is more than one replica and you are not using 'replicated' storage for
	// user_directory.
	ClusterName pulumi.StringPtrInput
	// Name of the user
	Name pulumi.StringPtrInput
	// SHA256 hash of the password to be set for the user
	PasswordSha256HashWo pulumi.StringInput
	// Version of the passwordSha256HashWo field. Bump this value to require a force update of the password on the user.
	PasswordSha256HashWoVersion pulumi.IntInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
// This field must be left null when using a ClickHouse Cloud cluster. When using a self hosted ClickHouse instance, this
// field should only be set when there is more than one replica and you are not using 'replicated' storage for
// user_directory.
func (o UserOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// Name of the user
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SHA256 hash of the password to be set for the user
func (o UserOutput) PasswordSha256HashWo() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.PasswordSha256HashWo }).(pulumi.StringOutput)
}

// Version of the passwordSha256HashWo field. Bump this value to require a force update of the password on the user.
func (o UserOutput) PasswordSha256HashWoVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *User) pulumi.IntOutput { return v.PasswordSha256HashWoVersion }).(pulumi.IntOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
