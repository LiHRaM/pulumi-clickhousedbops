// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhousedbops

import (
	"context"
	"reflect"

	"errors"
	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// You can use the `SettingsProfileAssociation` resource to associate a `settingsProfile` to a `role` or `user` in a `ClickHouse` instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clickhousedbops.NewSettingsProfileAssociation(ctx, "roleassociation", &clickhousedbops.SettingsProfileAssociationArgs{
//				SettingsProfileId: pulumi.Any(profile1.Id),
//				RoleId:            pulumi.Any(role1.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SettingsProfileAssociation struct {
	pulumi.CustomResourceState

	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// ID of the SettingsProfileAssociation to associate the Settings profile to
	RoleId pulumi.StringPtrOutput `pulumi:"roleId"`
	// ID of the settings profile to associate
	SettingsProfileId pulumi.StringOutput `pulumi:"settingsProfileId"`
	// ID of the User to associate the Settings profile to
	UserId pulumi.StringPtrOutput `pulumi:"userId"`
}

// NewSettingsProfileAssociation registers a new resource with the given unique name, arguments, and options.
func NewSettingsProfileAssociation(ctx *pulumi.Context,
	name string, args *SettingsProfileAssociationArgs, opts ...pulumi.ResourceOption) (*SettingsProfileAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SettingsProfileId == nil {
		return nil, errors.New("invalid value for required argument 'SettingsProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SettingsProfileAssociation
	err := ctx.RegisterResource("clickhousedbops:index/settingsProfileAssociation:SettingsProfileAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSettingsProfileAssociation gets an existing SettingsProfileAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSettingsProfileAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingsProfileAssociationState, opts ...pulumi.ResourceOption) (*SettingsProfileAssociation, error) {
	var resource SettingsProfileAssociation
	err := ctx.ReadResource("clickhousedbops:index/settingsProfileAssociation:SettingsProfileAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SettingsProfileAssociation resources.
type settingsProfileAssociationState struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName *string `pulumi:"clusterName"`
	// ID of the SettingsProfileAssociation to associate the Settings profile to
	RoleId *string `pulumi:"roleId"`
	// ID of the settings profile to associate
	SettingsProfileId *string `pulumi:"settingsProfileId"`
	// ID of the User to associate the Settings profile to
	UserId *string `pulumi:"userId"`
}

type SettingsProfileAssociationState struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrInput
	// ID of the SettingsProfileAssociation to associate the Settings profile to
	RoleId pulumi.StringPtrInput
	// ID of the settings profile to associate
	SettingsProfileId pulumi.StringPtrInput
	// ID of the User to associate the Settings profile to
	UserId pulumi.StringPtrInput
}

func (SettingsProfileAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingsProfileAssociationState)(nil)).Elem()
}

type settingsProfileAssociationArgs struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName *string `pulumi:"clusterName"`
	// ID of the SettingsProfileAssociation to associate the Settings profile to
	RoleId *string `pulumi:"roleId"`
	// ID of the settings profile to associate
	SettingsProfileId string `pulumi:"settingsProfileId"`
	// ID of the User to associate the Settings profile to
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a SettingsProfileAssociation resource.
type SettingsProfileAssociationArgs struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrInput
	// ID of the SettingsProfileAssociation to associate the Settings profile to
	RoleId pulumi.StringPtrInput
	// ID of the settings profile to associate
	SettingsProfileId pulumi.StringInput
	// ID of the User to associate the Settings profile to
	UserId pulumi.StringPtrInput
}

func (SettingsProfileAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingsProfileAssociationArgs)(nil)).Elem()
}

type SettingsProfileAssociationInput interface {
	pulumi.Input

	ToSettingsProfileAssociationOutput() SettingsProfileAssociationOutput
	ToSettingsProfileAssociationOutputWithContext(ctx context.Context) SettingsProfileAssociationOutput
}

func (*SettingsProfileAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingsProfileAssociation)(nil)).Elem()
}

func (i *SettingsProfileAssociation) ToSettingsProfileAssociationOutput() SettingsProfileAssociationOutput {
	return i.ToSettingsProfileAssociationOutputWithContext(context.Background())
}

func (i *SettingsProfileAssociation) ToSettingsProfileAssociationOutputWithContext(ctx context.Context) SettingsProfileAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsProfileAssociationOutput)
}

// SettingsProfileAssociationArrayInput is an input type that accepts SettingsProfileAssociationArray and SettingsProfileAssociationArrayOutput values.
// You can construct a concrete instance of `SettingsProfileAssociationArrayInput` via:
//
//	SettingsProfileAssociationArray{ SettingsProfileAssociationArgs{...} }
type SettingsProfileAssociationArrayInput interface {
	pulumi.Input

	ToSettingsProfileAssociationArrayOutput() SettingsProfileAssociationArrayOutput
	ToSettingsProfileAssociationArrayOutputWithContext(context.Context) SettingsProfileAssociationArrayOutput
}

type SettingsProfileAssociationArray []SettingsProfileAssociationInput

func (SettingsProfileAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingsProfileAssociation)(nil)).Elem()
}

func (i SettingsProfileAssociationArray) ToSettingsProfileAssociationArrayOutput() SettingsProfileAssociationArrayOutput {
	return i.ToSettingsProfileAssociationArrayOutputWithContext(context.Background())
}

func (i SettingsProfileAssociationArray) ToSettingsProfileAssociationArrayOutputWithContext(ctx context.Context) SettingsProfileAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsProfileAssociationArrayOutput)
}

// SettingsProfileAssociationMapInput is an input type that accepts SettingsProfileAssociationMap and SettingsProfileAssociationMapOutput values.
// You can construct a concrete instance of `SettingsProfileAssociationMapInput` via:
//
//	SettingsProfileAssociationMap{ "key": SettingsProfileAssociationArgs{...} }
type SettingsProfileAssociationMapInput interface {
	pulumi.Input

	ToSettingsProfileAssociationMapOutput() SettingsProfileAssociationMapOutput
	ToSettingsProfileAssociationMapOutputWithContext(context.Context) SettingsProfileAssociationMapOutput
}

type SettingsProfileAssociationMap map[string]SettingsProfileAssociationInput

func (SettingsProfileAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingsProfileAssociation)(nil)).Elem()
}

func (i SettingsProfileAssociationMap) ToSettingsProfileAssociationMapOutput() SettingsProfileAssociationMapOutput {
	return i.ToSettingsProfileAssociationMapOutputWithContext(context.Background())
}

func (i SettingsProfileAssociationMap) ToSettingsProfileAssociationMapOutputWithContext(ctx context.Context) SettingsProfileAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsProfileAssociationMapOutput)
}

type SettingsProfileAssociationOutput struct{ *pulumi.OutputState }

func (SettingsProfileAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingsProfileAssociation)(nil)).Elem()
}

func (o SettingsProfileAssociationOutput) ToSettingsProfileAssociationOutput() SettingsProfileAssociationOutput {
	return o
}

func (o SettingsProfileAssociationOutput) ToSettingsProfileAssociationOutputWithContext(ctx context.Context) SettingsProfileAssociationOutput {
	return o
}

// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
// This field must be left null when using a ClickHouse Cloud cluster.
// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
func (o SettingsProfileAssociationOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingsProfileAssociation) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// ID of the SettingsProfileAssociation to associate the Settings profile to
func (o SettingsProfileAssociationOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingsProfileAssociation) pulumi.StringPtrOutput { return v.RoleId }).(pulumi.StringPtrOutput)
}

// ID of the settings profile to associate
func (o SettingsProfileAssociationOutput) SettingsProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *SettingsProfileAssociation) pulumi.StringOutput { return v.SettingsProfileId }).(pulumi.StringOutput)
}

// ID of the User to associate the Settings profile to
func (o SettingsProfileAssociationOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingsProfileAssociation) pulumi.StringPtrOutput { return v.UserId }).(pulumi.StringPtrOutput)
}

type SettingsProfileAssociationArrayOutput struct{ *pulumi.OutputState }

func (SettingsProfileAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingsProfileAssociation)(nil)).Elem()
}

func (o SettingsProfileAssociationArrayOutput) ToSettingsProfileAssociationArrayOutput() SettingsProfileAssociationArrayOutput {
	return o
}

func (o SettingsProfileAssociationArrayOutput) ToSettingsProfileAssociationArrayOutputWithContext(ctx context.Context) SettingsProfileAssociationArrayOutput {
	return o
}

func (o SettingsProfileAssociationArrayOutput) Index(i pulumi.IntInput) SettingsProfileAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SettingsProfileAssociation {
		return vs[0].([]*SettingsProfileAssociation)[vs[1].(int)]
	}).(SettingsProfileAssociationOutput)
}

type SettingsProfileAssociationMapOutput struct{ *pulumi.OutputState }

func (SettingsProfileAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingsProfileAssociation)(nil)).Elem()
}

func (o SettingsProfileAssociationMapOutput) ToSettingsProfileAssociationMapOutput() SettingsProfileAssociationMapOutput {
	return o
}

func (o SettingsProfileAssociationMapOutput) ToSettingsProfileAssociationMapOutputWithContext(ctx context.Context) SettingsProfileAssociationMapOutput {
	return o
}

func (o SettingsProfileAssociationMapOutput) MapIndex(k pulumi.StringInput) SettingsProfileAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SettingsProfileAssociation {
		return vs[0].(map[string]*SettingsProfileAssociation)[vs[1].(string)]
	}).(SettingsProfileAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsProfileAssociationInput)(nil)).Elem(), &SettingsProfileAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsProfileAssociationArrayInput)(nil)).Elem(), SettingsProfileAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsProfileAssociationMapInput)(nil)).Elem(), SettingsProfileAssociationMap{})
	pulumi.RegisterOutputType(SettingsProfileAssociationOutput{})
	pulumi.RegisterOutputType(SettingsProfileAssociationArrayOutput{})
	pulumi.RegisterOutputType(SettingsProfileAssociationMapOutput{})
}
