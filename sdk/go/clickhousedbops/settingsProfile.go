// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhousedbops

import (
	"context"
	"reflect"

	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// You can use the `SettingsProfile` resource to create a `Setting Profile` in a `ClickHouse` instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/LiHRaM/pulumi-clickhousedbops/sdk/go/clickhousedbops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clickhousedbops.NewSettingsProfile(ctx, "profile1", &clickhousedbops.SettingsProfileArgs{
//				ClusterName: pulumi.String("cluster"),
//				Name:        pulumi.String("profile1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Settings profiles can be imported by specifying the UUID.
//
// Find the ID of the settings profile by checking system.settings_profiles table.
//
// ```sh
// $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
// ```
//
// It's also possible to import settings profiles by name:
//
// ```sh
// $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example name
// ```
//
// IMPORTANT: if you have a multi node cluster, you need to specify the cluster name!
//
// ```sh
// $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example cluster:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
// ```
//
// ```sh
// $ pulumi import clickhousedbops:index/settingsProfile:SettingsProfile example cluster:name
// ```
type SettingsProfile struct {
	pulumi.CustomResourceState

	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// List of setting profile names to inherit from
	InheritFroms pulumi.StringArrayOutput `pulumi:"inheritFroms"`
	// Name of the settings profile
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSettingsProfile registers a new resource with the given unique name, arguments, and options.
func NewSettingsProfile(ctx *pulumi.Context,
	name string, args *SettingsProfileArgs, opts ...pulumi.ResourceOption) (*SettingsProfile, error) {
	if args == nil {
		args = &SettingsProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SettingsProfile
	err := ctx.RegisterResource("clickhousedbops:index/settingsProfile:SettingsProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSettingsProfile gets an existing SettingsProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSettingsProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingsProfileState, opts ...pulumi.ResourceOption) (*SettingsProfile, error) {
	var resource SettingsProfile
	err := ctx.ReadResource("clickhousedbops:index/settingsProfile:SettingsProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SettingsProfile resources.
type settingsProfileState struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName *string `pulumi:"clusterName"`
	// List of setting profile names to inherit from
	InheritFroms []string `pulumi:"inheritFroms"`
	// Name of the settings profile
	Name *string `pulumi:"name"`
}

type SettingsProfileState struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrInput
	// List of setting profile names to inherit from
	InheritFroms pulumi.StringArrayInput
	// Name of the settings profile
	Name pulumi.StringPtrInput
}

func (SettingsProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingsProfileState)(nil)).Elem()
}

type settingsProfileArgs struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName *string `pulumi:"clusterName"`
	// List of setting profile names to inherit from
	InheritFroms []string `pulumi:"inheritFroms"`
	// Name of the settings profile
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a SettingsProfile resource.
type SettingsProfileArgs struct {
	// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
	// This field must be left null when using a ClickHouse Cloud cluster.
	// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
	ClusterName pulumi.StringPtrInput
	// List of setting profile names to inherit from
	InheritFroms pulumi.StringArrayInput
	// Name of the settings profile
	Name pulumi.StringPtrInput
}

func (SettingsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingsProfileArgs)(nil)).Elem()
}

type SettingsProfileInput interface {
	pulumi.Input

	ToSettingsProfileOutput() SettingsProfileOutput
	ToSettingsProfileOutputWithContext(ctx context.Context) SettingsProfileOutput
}

func (*SettingsProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingsProfile)(nil)).Elem()
}

func (i *SettingsProfile) ToSettingsProfileOutput() SettingsProfileOutput {
	return i.ToSettingsProfileOutputWithContext(context.Background())
}

func (i *SettingsProfile) ToSettingsProfileOutputWithContext(ctx context.Context) SettingsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsProfileOutput)
}

// SettingsProfileArrayInput is an input type that accepts SettingsProfileArray and SettingsProfileArrayOutput values.
// You can construct a concrete instance of `SettingsProfileArrayInput` via:
//
//	SettingsProfileArray{ SettingsProfileArgs{...} }
type SettingsProfileArrayInput interface {
	pulumi.Input

	ToSettingsProfileArrayOutput() SettingsProfileArrayOutput
	ToSettingsProfileArrayOutputWithContext(context.Context) SettingsProfileArrayOutput
}

type SettingsProfileArray []SettingsProfileInput

func (SettingsProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingsProfile)(nil)).Elem()
}

func (i SettingsProfileArray) ToSettingsProfileArrayOutput() SettingsProfileArrayOutput {
	return i.ToSettingsProfileArrayOutputWithContext(context.Background())
}

func (i SettingsProfileArray) ToSettingsProfileArrayOutputWithContext(ctx context.Context) SettingsProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsProfileArrayOutput)
}

// SettingsProfileMapInput is an input type that accepts SettingsProfileMap and SettingsProfileMapOutput values.
// You can construct a concrete instance of `SettingsProfileMapInput` via:
//
//	SettingsProfileMap{ "key": SettingsProfileArgs{...} }
type SettingsProfileMapInput interface {
	pulumi.Input

	ToSettingsProfileMapOutput() SettingsProfileMapOutput
	ToSettingsProfileMapOutputWithContext(context.Context) SettingsProfileMapOutput
}

type SettingsProfileMap map[string]SettingsProfileInput

func (SettingsProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingsProfile)(nil)).Elem()
}

func (i SettingsProfileMap) ToSettingsProfileMapOutput() SettingsProfileMapOutput {
	return i.ToSettingsProfileMapOutputWithContext(context.Background())
}

func (i SettingsProfileMap) ToSettingsProfileMapOutputWithContext(ctx context.Context) SettingsProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsProfileMapOutput)
}

type SettingsProfileOutput struct{ *pulumi.OutputState }

func (SettingsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingsProfile)(nil)).Elem()
}

func (o SettingsProfileOutput) ToSettingsProfileOutput() SettingsProfileOutput {
	return o
}

func (o SettingsProfileOutput) ToSettingsProfileOutputWithContext(ctx context.Context) SettingsProfileOutput {
	return o
}

// Name of the cluster to create the resource into. If omitted, resource will be created on the replica hit by the query.
// This field must be left null when using a ClickHouse Cloud cluster.
// When using a self hosted ClickHouse instance, this field should only be set when there is more than one replica and you are not using 'replicated' storage for user_directory.
func (o SettingsProfileOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingsProfile) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// List of setting profile names to inherit from
func (o SettingsProfileOutput) InheritFroms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingsProfile) pulumi.StringArrayOutput { return v.InheritFroms }).(pulumi.StringArrayOutput)
}

// Name of the settings profile
func (o SettingsProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SettingsProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type SettingsProfileArrayOutput struct{ *pulumi.OutputState }

func (SettingsProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingsProfile)(nil)).Elem()
}

func (o SettingsProfileArrayOutput) ToSettingsProfileArrayOutput() SettingsProfileArrayOutput {
	return o
}

func (o SettingsProfileArrayOutput) ToSettingsProfileArrayOutputWithContext(ctx context.Context) SettingsProfileArrayOutput {
	return o
}

func (o SettingsProfileArrayOutput) Index(i pulumi.IntInput) SettingsProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SettingsProfile {
		return vs[0].([]*SettingsProfile)[vs[1].(int)]
	}).(SettingsProfileOutput)
}

type SettingsProfileMapOutput struct{ *pulumi.OutputState }

func (SettingsProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingsProfile)(nil)).Elem()
}

func (o SettingsProfileMapOutput) ToSettingsProfileMapOutput() SettingsProfileMapOutput {
	return o
}

func (o SettingsProfileMapOutput) ToSettingsProfileMapOutputWithContext(ctx context.Context) SettingsProfileMapOutput {
	return o
}

func (o SettingsProfileMapOutput) MapIndex(k pulumi.StringInput) SettingsProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SettingsProfile {
		return vs[0].(map[string]*SettingsProfile)[vs[1].(string)]
	}).(SettingsProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsProfileInput)(nil)).Elem(), &SettingsProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsProfileArrayInput)(nil)).Elem(), SettingsProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsProfileMapInput)(nil)).Elem(), SettingsProfileMap{})
	pulumi.RegisterOutputType(SettingsProfileOutput{})
	pulumi.RegisterOutputType(SettingsProfileArrayOutput{})
	pulumi.RegisterOutputType(SettingsProfileMapOutput{})
}
